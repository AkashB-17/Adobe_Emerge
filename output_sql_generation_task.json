[
  {
    "NL": "Find the average time spent on the website by users who clicked on a push notification and completed a survey.",
    "Query": "SELECT AVG(time\\_spent) \nFROM users \nWHERE clicked\\_push\\_notification = true AND completed\\_survey = tr"
  },
  {
    "NL": "Get the count of wishlist items for each user and sort them in descending order.",
    "Query": "SELECT user\\_id, COUNT(*) as wishlist\\_count\nFROM wishlist\nGROUP BY user\\_id\nORDER BY wishlist\\_count DE"
  },
  {
    "NL": "Find the products in the cart that have a promotional discounted price less than $50, along with the customer's loyalty program tier level and the customer's accumulated loyalty points balance.",
    "Query": "SELECT c.product\\_id, c.promotional\\_price, l.tier\\_level, l.loyalty\\_points\\_balance\nFROM cart c\nJOIN customer\\_loyalty l ON c.customer\\_id = l.customer\\_id\nWHERE c.promotional\\_price <"
  },
  {
    "NL": "What is the total discount amount redeemed by customers who have participated in exclusive beta testing and have a loyalty membership unique identifier greater than 1000?",
    "Query": "SELECT SUM(discount\\_amount)\nFROM redeemed\\_discounts\nWHERE customer\\_id IN (\n    SELECT id\n    FROM customers\n    WHERE is\\_beta\\_tester = true AND loyalty\\_membership\\_id > 1000"
  },
  {
    "NL": "Retrieve the total amount of all orders that contain products from the cart of user with ID 123 and have a shipping date after January 1, 2023.",
    "Query": "SELECT SUM(amount)\nFROM orders\nWHERE user_id = 123 AND shipping_date > '2023-01-01' AND EXISTS (\n    SELECT 1\n    FROM order_items\n    WHERE order_id = orders.id"
  },
  {
    "NL": "What are the campaign names of the campaigns that have generated more than $1000 in revenue and have a cost per acquisition of less than $10?",
    "Query": "SELECT campaign\\_name\nFROM campaigns\nWHERE revenue > 1000 AND cost\\_per\\_acquisition <"
  },
  {
    "NL": "Show the average rating of reviews submitted by customers who are verified and have active subscriptions, and the number of helpful votes they received.",
    "Query": "SELECT AVG(reviews.rating), SUM(reviews.helpful_votes)\nFROM reviews\nJOIN customers ON reviews.customer\\_id = customers.id\nWHERE customers.verified = true AND customers.subscription\\_status = 'activ"
  },
  {
    "NL": "Find the product name and average review rating for products with more than 100 reviews",
    "Query": "SELECT product\\_name, AVG(review\\_rating)\nFROM products\nGROUP BY product\\_name\nHAVING COUNT(review\\_id) > 1"
  },
  {
    "NL": "Find the total number of orders placed by premium customers who have purchased products with an average supplier rating greater than 4 and have a total number of verified reviews greater than 1000, along with the total amount spent by these customers, the average rating given by them, and the total number of helpful votes received by their reviews.",
    "Query": "SELECT \n    COUNT(DISTINCT o.customer_id) AS total_orders,\n    SUM(o.amount) AS total_amount_spent,\n    AVG(r.rating) AS average_rating,\n    SUM(r.helpful_votes) AS total_helpful_votes\nFROM \n    orders o\nJOIN \n    customers c ON o.customer_id = c.customer_id\nJOIN \n    reviews r ON o.order_id = r.order_id\nJOIN \n    products p ON r.product_id = p.product_id\nJOIN \n    suppliers s ON p.supplier_id = s.supplier_id\nWHERE \n    c.customer_type = 'premium'\n    AND s.average_rating > 4\n    AND r.verified_reviews > 10"
  },
  {
    "NL": "List the orders with a discount applied greater than 10% in any currency.",
    "Query": "SELECT * FROM orders WHERE discount > 0"
  },
  {
    "NL": "Find the total number of products and the total price for each cart associated with a specific user.",
    "Query": "SELECT c.user\\_id, COUNT(p.id) AS total\\_products, SUM(p.price) AS total\\_price\nFROM carts c\nJOIN cart\\_items ci ON c.id = ci.cart\\_id\nJOIN products p ON ci.product\\_id = p.id\nWHERE c.user\\_id = [specific user id]\nGROUP BY c.user\\_"
  },
  {
    "NL": "List all items in the wishlist where the expected purchase date is within the next 30 days and the priority level is 'high'.",
    "Query": "SELECT * FROM wishlist \nWHERE expected\\_purchase\\_date <= NOW() + INTERVAL '30 days' \nAND priority\\_level = 'hig"
  },
  {
    "NL": "Find the total number of products supplied by each supplier, along with the average supplier rating and the number of inventories associated with each supplier, ordered by the total number of products supplied in descending order.",
    "Query": "```sql\nSELECT \n    s.supplier_id, \n    COUNT(p.product_id) AS total_products,\n    AVG(r.rating) AS average_rating,\n    COUNT(i.inventory_id) AS total_inventories\nFROM \n    suppliers s\nJOIN \n    products p ON s.supplier_id = p.supplier_id\nJOIN \n    ratings r ON p.product_id = r.product_id\nJOIN \n    inventories i ON p.product_id = i.product_id\nGROUP BY \n    s.supplier_id\nORDER BY \n    total_products DESC;"
  },
  {
    "NL": "Retrieve the total time spent and the average scroll depth percentage for events where the event type is 'purchase' and the device platform is 'mobile'.",
    "Query": "SELECT SUM(time\\_spent) AS total\\_time\\_spent, AVG(scroll\\_depth\\_percentage) AS avg\\_scroll\\_depth\\_percentage\nFROM events\nWHERE event\\_type = 'purchase' AND device\\_platform = 'mobil"
  },
  {
    "NL": "Find all reviews of products that have been purchased more than 5 times, with the customer's review submission date and the total number of helpful votes received.",
    "Query": "SELECT r.review\\_id, r.product\\_id, r.submission\\_date, r.helpful\\_votes\nFROM reviews r\nJOIN (\n    SELECT product\\_id, COUNT(*) as purchase\\_count\n    FROM purchases\n    GROUP BY product\\_id\n) p ON r.product\\_id = p.product\\_id\nWHERE p.purchase\\_count > 5\nORDER BY p.purchase\\_count DE"
  },
  {
    "NL": "Find the estimated delivery date and shipping cost for orders where the event type is 'order_placed' and the shipping status is 'shipped'.",
    "Query": "SELECT estimated\\_delivery\\_date, shipping\\_cost\nFROM orders\nWHERE event\\_type = 'order\\_placed' AND shipping\\_status = 'shippe"
  },
  {
    "NL": "Analyze the total number of clicks and the average time spent by customers from the United States who visited product pages of 'Electronics' category products and view those who spent the most time on the site, including product names and their respective suppliers.",
    "Query": "```sql\nSELECT \n    COUNT(clicks) AS total_clicks,\n    AVG(time_spent) AS avg_time_spent,\n    p.product_name,\n    s.supplier_name\nFROM \n    customer_visits cv\nJOIN \n    products p ON cv.product_id = p.product_id\nJOIN \n    suppliers s ON p.supplier_id = s.supplier_id\nWHERE \n    cv.country = 'United States' AND p.category = 'Electronics'\nGROUP BY \n    p.product_name, s.supplier_name\nORDER BY \n    avg_time_spent DESC;"
  },
  {
    "NL": "List all the campaigns with their corresponding campaign status, start date, end date and total revenue generated, and also list the total quantity of products in the cart for each campaign",
    "Query": "SELECT campaigns.name, campaign\\_statuses.status, campaigns.start\\_date, campaigns.end\\_date, SUM(orders.total\\_revenue) as total\\_revenue, SUM(cart\\_items.quantity) as total\\_quantity\nFROM campaigns\nJOIN campaign\\_statuses ON campaigns.status\\_id = campaign\\_statuses.id\nJOIN orders ON campaigns.id = orders.campaign\\_id\nJOIN cart\\_items ON orders.id = cart\\_items.order\\_id\nGROUP BY campaigns.name, campaign\\_statuses.status, campaigns.start\\_date, campaigns.end\\_da"
  },
  {
    "NL": "List the anniversary_reward_voucher_status of customers and their corresponding shipping_status for orders with fk_order_id = 67890.",
    "Query": "SELECT anniversary\\_reward\\_voucher\\_status, shipping\\_status\nFROM customers\nJOIN orders ON customers.customer\\_id = orders.fk\\_customer\\_id\nWHERE fk\\_order\\_id = 678"
  },
  {
    "NL": "Retrieve the loyalty_program_tier_level of customers who have reviewed a product referenced_product_identifier = 12345. Provide the review_unique_identifier and associated_review_image_urls.",
    "Query": "SELECT loyalty\\_program\\_tier\\_level, review\\_unique\\_identifier, associated\\_review\\_image\\_urls\nFROM customers\nJOIN reviews ON customers.customer\\_id = reviews.customer\\_id\nWHERE referenced\\_product\\_identifier = 123"
  },
  {
    "NL": "Find the total amount of all orders placed in the month of January 2023, along with the average tax amount applied to those orders.",
    "Query": "SELECT SUM(amount) AS total\\_amount, AVG(tax\\_amount) AS average\\_tax\nFROM orders\nWHERE EXTRACT(MONTH FROM order\\_date) = 1 AND EXTRACT(YEAR FROM order\\_date) = 20"
  },
  {
    "NL": "What is the total shipping cost for orders that have been shipped?",
    "Query": "SELECT SUM(shipping\\_cost) FROM orders WHERE shipping\\_status = 'shippe"
  },
  {
    "NL": "Get the wishlists with the name of the wishlist item and its price at addition, along with the order status of the orders with matching campaign ID.",
    "Query": "SELECT w.name, i.price, o.order\\_status\nFROM wishlists w\nJOIN wishlist\\_items i ON w.id = i.wishlist\\_id\nJOIN orders o ON i.order\\_id = o.id\nWHERE o.campaign\\_id ="
  },
  {
    "NL": "For each distinct product name in the wishlist, find the corresponding product id and brand name from the wishlist, as well as the order item id and item status from the order items table, where the wishlist product id matches the order item product id, and include the corresponding shipping address, shipping city, and shipping state from the shipping table.",
    "Query": "SELECT DISTINCT w.product\\_name, p.product\\_id, p.brand\\_name, oi.order\\_item\\_id, oi.item\\_status, s.shipping\\_address, s.shipping\\_city, s.shipping\\_state\nFROM wishlist w\nJOIN products p ON w.product\\_id = p.product\\_id\nJOIN order\\_items oi ON w.product\\_id = oi.product\\_id\nJOIN shipping s ON oi.order\\_id = s.order\\_"
  },
  {
    "NL": "Retrieve all refunds initiated by the users where the refund status is 'pending'.",
    "Query": "SELECT * FROM refunds WHERE user_id IN (SELECT user_id FROM refunds WHERE refund_status = 'pending') AND refund_status = 'pendin"
  },
  {
    "NL": "Find the total amount of all orders placed by customers from the United States that were shipped using standard shipping methods and include a discount.",
    "Query": "SELECT SUM(amount)\nFROM orders\nWHERE country = 'United States' AND shipping\\_method = 'standard' AND discount IS NOT NU"
  },
  {
    "NL": "Find the event type, the campaign name, and the total number of products supplied by each supplier for events where the device type is 'mobile' and the campaign status is 'completed' and the supplier tax identification number is '123456789'.",
    "Query": "SELECT event\\_type, campaign\\_name, COUNT(*) as total\\_products\nFROM events\nJOIN campaigns ON events.campaign\\_id = campaigns.campaign\\_id\nJOIN suppliers ON events.supplier\\_id = suppliers.supplier\\_id\nWHERE device\\_type = 'mobile' AND campaigns.campaign\\_status = 'completed' AND suppliers.tax\\_id = '123456789'\nGROUP BY event\\_type, campaign\\_name, events.supplier\\_"
  },
  {
    "NL": "Find the average total transaction amount for customers who have made at least one purchase and have loyalty points greater than 1000, along with the number of wishlist items and average spent per order for these customers, grouped by city and country",
    "Query": "SELECT AVG(total\\_transaction\\_amount) AS avg\\_total\\_transaction,\n       COUNT(*) AS num\\_purchases,\n       AVG(order\\_amount) AS avg\\_spent\\_per\\_order,\n       city,\n       country\nFROM (\n  SELECT customer\\_id,\n         SUM(transaction\\_amount) AS total\\_transaction\\_amount,\n         AVG(transaction\\_amount) AS order\\_amount,\n         loyalty\\_points,\n         city,\n         country\n  FROM purchases\n  JOIN customers ON purchases.customer\\_id = customers.id\n  WHERE loyalty\\_points > 1000\n  GROUP BY customer\\_id\n  HAVING COUNT(*) > 0\n) subquery\nGROUP BY city, count"
  },
  {
    "NL": "List all the orders where the order status is 'Shipped' and the device platform is 'Windows'.",
    "Query": "SELECT * FROM orders WHERE order\\_status = 'Shipped' AND device\\_platform = 'Window"
  },
  {
    "NL": "Retrieve the inventory of products with stock status as 'reorder'.",
    "Query": "SELECT * FROM inventory WHERE stock_status = 'reorde"
  },
  {
    "NL": "Find all campaigns with their corresponding total reach, impressions and email open rate where the campaign type is 'Social Media' and the target audience is 'Young Adults', and also find the total refund amount for each campaign",
    "Query": "SELECT campaigns.name, SUM(reach) as total\\_reach, SUM(impressions) as total\\_impressions, AVG(email\\_opens) as email\\_open\\_rate, SUM(refunds) as total\\_refunds\nFROM campaigns\nJOIN campaign\\_stats ON campaigns.id = campaign\\_stats.campaign\\_id\nWHERE campaigns.type = 'Social Media' AND campaigns.target\\_audience = 'Young Adults'\nGROUP BY campaigns.na"
  },
  {
    "NL": "Find the average shipping cost for orders shipped to the United States",
    "Query": "SELECT AVG(shipping_cost) \nFROM orders \nWHERE country = 'United State"
  },
  {
    "NL": "Find the total billed amount for transactions where the corresponding customer made a refund and the refund amount was more than $50.",
    "Query": "SELECT SUM(billed_amount)\nFROM transactions\nWHERE customer_id IN (\n    SELECT customer_id\n    FROM refunds\n    WHERE refund_amount > 50\n) AND refund_id IS NOT NU"
  },
  {
    "NL": "Show the total amount of refunds and the total restocking fees for items in the inventory that belong to products that have a featured product flag set to true",
    "Query": "SELECT SUM(refunds) AS total\\_refunds, SUM(restocking\\_fees) AS total\\_restocking\\_fees\nFROM inventory\nWHERE product\\_id IN (\n    SELECT id\n    FROM products\n    WHERE is\\_featured = true"
  },
  {
    "NL": "What is the average aggregate customer review rating for all products from suppliers in the USA, who have an average supplier rating of at least 4.5, and what is the average total number of products supplied by these suppliers?",
    "Query": "SELECT AVG(product\\_reviews.rating) AS avg\\_product\\_rating, AVG(supplier\\_orders.total\\_products) AS avg\\_total\\_products\nFROM suppliers\nJOIN supplier\\_orders ON suppliers.id = supplier\\_orders.supplier\\_id\nJOIN products ON supplier\\_orders.product\\_id = products.id\nJOIN product\\_reviews ON products.id = product\\_reviews.product\\_id\nWHERE suppliers.country = 'USA'\nGROUP BY suppliers.id\nHAVING AVG(suppliers.rating) >= 4"
  },
  {
    "NL": "Show the total number of customers who have an active subscription and a Loyalty points greater than 1000.",
    "Query": "SELECT COUNT(\\*) FROM customers \nWHERE subscription_status = 'active' \nAND loyalty_points > 10"
  },
  {
    "NL": "What is the product id and quantity for each order that has a transaction review score of more than 4.5 and has been fully paid?",
    "Query": "SELECT product\\_id, quantity\nFROM orders\nWHERE transaction\\_review\\_score > 4.5 AND payment\\_status = 'fully\\_pai"
  },
  {
    "NL": "Find the names of products that have received a review with a sentiment analysis score greater than 0.7 and have a total number of verified reviews of at least 50.",
    "Query": "SELECT product\\_name \nFROM products \nJOIN reviews ON products.id = reviews.product\\_id \nWHERE reviews.sentiment\\_score > 0.7 AND reviews.verified\\_reviews >="
  },
  {
    "NL": "List the inventory ids and referenced product ids of all inventory items with quantity less than the safety stock and the supplier id is 1.",
    "Query": "SELECT inventory\\_id, referenced\\_product\\_id\nFROM inventory\nWHERE quantity < safety\\_stock AND supplier\\_id ="
  },
  {
    "NL": "Get the total discount amount redeemed and the total number of products supplied for customers who are eligible for special promotions and have a supplier with more than 100 products supplied",
    "Query": "SELECT SUM(discount_amount) AS total\\_discount\\_redeemed, COUNT(*) AS total\\_products\\_supplied\nFROM orders\nJOIN customers ON orders.customer\\_id = customers.customer\\_id\nJOIN promotions ON customers.customer\\_id = promotions.customer\\_id\nJOIN suppliers ON orders.supplier\\_id = suppliers.supplier\\_id\nWHERE promotions.eligible = true\nGROUP BY customers.customer\\_id\nHAVING COUNT(DISTINCT suppliers.product\\_id) > 1"
  },
  {
    "NL": "Find the total transaction amount and the number of reviews for each customer who has made a transaction and submitted a review for the same product.",
    "Query": "SELECT c.customer\\_id, SUM(t.transaction\\_amount) as total\\_transaction\\_amount, COUNT(r.review\\_id) as number\\_of\\_reviews\nFROM customers c\nJOIN transactions t ON c.customer\\_id = t.customer\\_id\nJOIN reviews r ON c.customer\\_id = r.customer\\_id AND t.product\\_id = r.product\\_id\nGROUP BY c.customer\\_"
  },
  {
    "NL": "Retrieve the product display name, promotional price, and the loyalty membership unique identifier for customers who have redeemed loyalty points for products that are in stock and have an aggregate customer review rating of at least 4.",
    "Query": "SELECT product\\_display\\_name, promotional\\_price, loyalty\\_membership\\_id\nFROM products\nJOIN (\n    SELECT product\\_id\n    FROM customer\\_reviews\n    GROUP BY product\\_id\n    HAVING AVG(review\\_rating) >= 4\n) AS reviewed\\_products\nON products.product\\_id = reviewed\\_products.product\\_id\nJOIN (\n    SELECT product\\_id\n    FROM loyalty\\_redemptions\n    WHERE quantity > 0\n) AS in\\_stock\\_redemptions\nON products.product\\_id = in\\_stock\\_redemptions.product\\_"
  },
  {
    "NL": "Find all orders in the cart where the product is a featured product and the estimated delivery date is after today.",
    "Query": "SELECT * FROM cart \nWHERE product IS FEATURED \nAND estimated\\_delivery\\_date > CURRENT\\_DA"
  },
  {
    "NL": "Find the total number of products supplied by each supplier and list them in descending order.",
    "Query": "SELECT supplier\\_id, COUNT(*) as total\\_products\nFROM products\nGROUP BY supplier\\_id\nORDER BY total\\_products DE"
  },
  {
    "NL": "Retrieve the total amount of discounts applied to orders within the last year, grouped by campaign.",
    "Query": "SELECT campaign, SUM(discount)\nFROM orders\nWHERE order\\_date >= NOW() - INTERVAL '1 year'\nGROUP BY campai"
  },
  {
    "NL": "Identify the top 5 customers who have the highest total number of edits made in their reviews and have submitted reviews with a review_unique_identifier that is either 100 or 200. Additionally, for these customers, find the average time spent on the product review page and the total number of events where they clicked more than 3 times and spent more than 10 seconds on the page, considering only events that happened after June 1, 2022. The results should be ordered by the total number of edits in descending order.",
    "Query": "```sql\nSELECT c.customer_id,\n       COUNT(r.review_id) AS total_edits,\n       AVG(r.time_spent) AS avg_time_spent,\n       SUM(CASE WHEN e.clicks > 3 AND e.time_spent > 10 THEN 1 ELSE 0 END) AS high_engagement_events\nFROM customers c\nJOIN reviews r ON c.customer_id = r.customer_id\nJOIN events e ON r.review_id = e.review_id\nWHERE r.review_unique_identifier IN (100, 200)\n  AND e.event_timestamp > '2022-06-01'\nGROUP BY c.customer_id\nORDER BY total_edits DESC\nLIMIT 5;"
  },
  {
    "NL": "Find all the orders with total price greater than 100 and the item is returnable.",
    "Query": "SELECT * FROM orders\nWHERE total\\_price > 100 AND returnable = TR"
  },
  {
    "NL": "Retrieve the official business name of suppliers who provide products with an expected restock date this month and have a supplier rating above 4.5, along with the names of customers who have ordered from these suppliers.",
    "Query": "SELECT s.businessname, c.customername\nFROM suppliers s\nJOIN products p ON s.supplierid = p.supplierid\nJOIN orders o ON p.productid = o.productid\nJOIN customers c ON o.customerid = c.customerid\nWHERE EXTRACT(MONTH FROM p.restockdate) = EXTRACT(MONTH FROM NOW()) AND s.supplierrating > 4"
  },
  {
    "NL": "Get the list of customers who have viewed their wishlist at least once and have made a purchase, along with their wishlist details, the number of reviews they have submitted, and the total amount spent by them. Include the event type and device platform for each customer.",
    "Query": "SELECT c.customer\\_id, c.name, w.wishlist\\_id, w.product\\_id, w.quantity,\n       COUNT(r.customer\\_id) AS reviews\\_submitted,\n       SUM(o.total\\_amount) AS total\\_amount\\_spent,\n       e.event\\_type, e.device\\_platform\nFROM customers c\nJOIN wishlists w ON c.customer\\_id = w.customer\\_id\nJOIN event\\_log e ON c.customer\\_id = e.customer\\_id\nLEFT JOIN reviews r ON c.customer\\_id = r.customer\\_id\nJOIN orders o ON c.customer\\_id = o.customer\\_id\nWHERE e.event\\_type = 'viewed\\_wishlist'\nAND o.order\\_id IS NOT NULL\nGROUP BY c.customer\\_id, w.wishlist\\_id, w.product\\_id, e.event\\_type, e.device\\_platfo"
  },
  {
    "NL": "List all customers who have registered after January 1, 2022, and have a loyalty point balance greater than 1000.",
    "Query": "SELECT * FROM customers \nWHERE registration_date > '2022-01-01' \nAND loyalty_point_balance > 10"
  },
  {
    "NL": "Find all reviews with a sentiment analysis score greater than 4 that were submitted by customers who have made more than 10 previous purchases and were reviewed on the same day as the last restock date of their associated product, excluding those products that are currently out of stock.",
    "Query": "SELECT r.*\nFROM reviews r\nJOIN (\n    SELECT customer\\_id, product\\_id, MAX(submission\\_date) as max\\_submission\\_date\n    FROM reviews\n    WHERE sentiment\\_analysis\\_score > 4\n    GROUP BY customer\\_id, product\\_id\n) rs\nON r.customer\\_id = rs.customer\\_id AND r.product\\_id = rs.product\\_id AND r.submission\\_date = rs.max\\_submission\\_date\nJOIN (\n    SELECT product\\_id, inventory\\_date\n    FROM products\n    WHERE inventory > 0\n) p\nON r.product\\_id = p.product\\_id AND r.submission\\_date = p.inventory\\_date\nORDER BY r.submission\\_date DE"
  },
  {
    "NL": "Find all products with a standard retail price greater than $50 and the customers who have redeemed more than 1000 loyalty points and have an anniversary reward voucher status as true.",
    "Query": "SELECT p.product\\_name, p.standard\\_retail\\_price\nFROM products p\nWHERE p.standard\\_retail\\_price > 50\n\nSELECT c.customer\\_name, c.loyalty\\_points, crv.voucher\\_status\nFROM customers c\nJOIN customer\\_reward\\_vouchers crv ON c.customer\\_id = crv.customer\\_id\nWHERE c.loyalty\\_points > 1000 AND crv.voucher\\_status = tr"
  },
  {
    "NL": "Retrieve the first name, last name, and total discount amount redeemed for customers who are eligible for special promotions and have more than 1000 loyalty points.",
    "Query": "SELECT first\\_name, last\\_name, SUM(discount\\_amount)\nFROM customers\nJOIN promotions ON customers.customer\\_id = promotions.customer\\_id\nWHERE loyalty\\_points > 1000\nGROUP BY first\\_name, last\\_na"
  },
  {
    "NL": "What is the total revenue generated by each campaign and the total amount spent by each order?",
    "Query": "SELECT c.campaign\\_name, SUM(o.revenue) AS total\\_revenue, SUM(oi.price) AS total\\_amount\\_spent\nFROM campaigns c\nJOIN orders o ON c.id = o.campaign\\_id\nJOIN order\\_items oi ON o.id = oi.order\\_id\nGROUP BY c.campaign\\_na"
  },
  {
    "NL": "Find the total orders for each customer who has a preferred payment method and sort the results in ascending order.",
    "Query": "SELECT customer\\_id, SUM(order\\_amount) as total\\_orders\nFROM orders\nWHERE preferred\\_payment\\_method IS NOT NULL\nGROUP BY customer\\_id\nORDER BY total\\_orders A"
  },
  {
    "NL": "Get the campaign name and total revenue generated for each campaign from the given campaign ID. Also, find the total billed amount in the transactions table for each campaign ID. Order the results by the total revenue in descending order.",
    "Query": "SELECT campaign\\_id, SUM(revenue) AS total\\_revenue, SUM(billed\\_amount) AS total\\_billed\\_amount\nFROM campaigns\nJOIN transactions ON campaigns.campaign\\_id = transactions.campaign\\_id\nGROUP BY campaign\\_id\nORDER BY total\\_revenue DE"
  },
  {
    "NL": "Calculate the total revenue generated by successful campaigns that ended in the last 30 days.",
    "Query": "SELECT SUM(revenue)\nFROM campaigns\nWHERE status = 'successful' AND end_date >= NOW() - INTERVAL '30 day"
  },
  {
    "NL": "Find the total number of products supplied by each supplier along with the corresponding inventory quantity for products with a safety stock greater than 10.",
    "Query": "SELECT supplier\\_id, SUM(quantity) as total\\_supplied, inventory\\_quantity\nFROM products\nWHERE safety\\_stock > 10\nGROUP BY supplier\\_id, inventory\\_quanti"
  },
  {
    "NL": "List the customer loyalty program details for customers who have placed orders with a total amount greater than $100, including their loyalty points balance, loyalty tier level, and the campaign name for the order.",
    "Query": "SELECT customer\\_loyalty.loyalty\\_points\\_balance, customer\\_loyalty.loyalty\\_tier\\_level, campaign.campaign\\_name\nFROM customer\\_loyalty\nJOIN customer\\_order ON customer\\_loyalty.customer\\_id = customer\\_order.customer\\_id\nJOIN `order` ON customer\\_order.order\\_id = `order`.order\\_id\nJOIN campaign ON `order`.campaign\\_id = campaign.campaign\\_id\nWHERE `order`.total\\_amount > 1"
  },
  {
    "NL": "Find the total revenue generated by each campaign type along with the total quantity of inventory for each product",
    "Query": "SELECT campaign\\_type, SUM(revenue) AS total\\_revenue, \n       product, SUM(quantity) AS total\\_quantity\nFROM orders\nJOIN products ON orders.product\\_id = products.id\nGROUP BY campaign\\_type, produ"
  },
  {
    "NL": "List the average number of stars given by customers who have placed more than 10 orders.",
    "Query": "SELECT AVG(reviews.stars)\nFROM reviews\nJOIN orders ON reviews.customer\\_id = orders.customer\\_id\nGROUP BY reviews.customer\\_id\nHAVING COUNT(orders.order\\_id) >"
  },
  {
    "NL": "Find the top 5 most purchased products with their average rating from customers who have purchased at least 2 products and have a loyalty membership tier level of Platinum, along with the total number of reviews for each product and the total loyalty points earned by each customer.",
    "Query": "Here's the SQL query for your request:\n\n```sql\nSELECT p.product_id, p.product_name, AVG(r.rating) AS average_rating,\n       COUNT(r.review_id) AS total_reviews, SUM(l.loyalty_points) AS total_loyalty_points\nFROM customers c\nJOIN purchases pu ON c.customer_id = pu.customer_id\nJOIN loyalty l ON c.customer_id = l.customer_id\nJOIN reviews r ON pu.purchase_id = r.purchase_id\nJOIN products p ON pu.product_id = p.product_id\nWHERE c.loyalty_tier = 'Platinum'\nGROUP BY p.product_id, p.product_name\nORDER BY average_rating DESC, total_reviews DESC\nLIMIT 5;"
  },
  {
    "NL": "Find the total revenue generated by campaigns that were successful, defined as campaigns with an actual spent less than the budget.",
    "Query": "SELECT SUM(actual\\_spent) AS total\\_revenue\nFROM campaigns\nWHERE actual\\_spent < budg"
  },
  {
    "NL": "Retrieve the product display names and the number of orders for products that have been reviewed with a rating above 4 in the past month, along with the customer's first name and last name who placed the order.",
    "Query": "SELECT p.display\\_name, COUNT(o.id) as order\\_count, c.first\\_name, c.last\\_name\nFROM products p\nJOIN orders o ON p.id = o.product\\_id\nJOIN customers c ON o.customer\\_id = c.id\nJOIN reviews r ON p.id = r.product\\_id\nWHERE r.rating > 4 AND o.order\\_date >= NOW() - INTERVAL '1 month'\nGROUP BY p.display\\_name, c.first\\_name, c.last\\_na"
  },
  {
    "NL": "Get the total quantity of all products in the inventory with a stock status of 'in stock' and a warehouse location of 'main warehouse', along with the product identifier and last updated timestamp.",
    "Query": "SELECT product\\_identifier, last\\_updated, SUM(quantity)\nFROM inventory\nWHERE stock\\_status = 'in stock' AND warehouse\\_location = 'main warehouse'\nGROUP BY product\\_identifier, last\\_updat"
  },
  {
    "NL": "Get the top 5 products with highest average customer review rating.",
    "Query": "SELECT * FROM products \nORDER BY AVG(customer\\_review\\_rating) DESC \nLIMIT"
  },
  {
    "NL": "Get the average amount spent per order by each customer for orders placed in the last 30 days.",
    "Query": "SELECT customer\\_id, AVG(amount) \nFROM orders \nWHERE order\\_date >= NOW() - INTERVAL '30 days' \nGROUP BY customer\\_"
  },
  {
    "NL": "Retrieve all reviews where the reviewer is verified and the review has received more than 5 helpful votes.",
    "Query": "SELECT * FROM reviews \nWHERE reviewer\\_verified = true \nAND helpful\\_votes >"
  },
  {
    "NL": "Retrieve the details of products in the wishlist along with customer's first and last name for wishlists that have a reminder set and the product is still in stock.",
    "Query": "SELECT w.customer\\_first\\_name, w.customer\\_last\\_name, p.product\\_id, p.product\\_name, p.price, p.quantity\nFROM wishlists w\nJOIN products p ON w.product\\_id = p.product\\_id\nWHERE w.has\\_reminder = TRUE AND p.quantity >"
  },
  {
    "NL": "Retrieve the details of products that have been returned more than once due to 'damaged' reasons, along with the average cart value of those returns and the customer's email who initiated the returns, excluding products that are no longer active.",
    "Query": "SELECT p.product\\_id, p.name, p.price, COUNT(r.return\\_id) as return\\_count, AVG(c.cart\\_value) as avg\\_cart\\_value, r.customer\\_email\nFROM products p\nJOIN returns r ON p.product\\_id = r.product\\_id AND r.return\\_reason = 'damaged'\nJOIN carts c ON r.cart\\_id = c.cart\\_id\nWHERE p.active = true\nGROUP BY p.product\\_id, p.name, p.price, r.customer\\_email\nHAVING COUNT(r.return\\_id) >"
  },
  {
    "NL": "How many campaigns are of type 'email' and have an email open rate greater than 0.5?",
    "Query": "SELECT COUNT(\\*) FROM campaigns WHERE campaign\\_type = 'email' AND email\\_open\\_rate > 0"
  },
  {
    "NL": "Which products are shipped to the same state where shipping status is 'Delivered' and estimated delivery is within the next 7 days?",
    "Query": "SELECT products.*\nFROM products\nJOIN shipments ON products.id = shipments.product\\_id\nWHERE shipments.shipping\\_state = (\n    SELECT shipments.shipping\\_state\n    FROM shipments\n    WHERE shipments.status = 'Delivered' AND shipments.estimated\\_delivery <= NOW() + INTERVAL '7 days'\n    GROUP BY shipments.shipping\\_state\n    LIMIT 1\n) AND shipments.status = 'Delivered' AND shipments.estimated\\_delivery <= NOW() + INTERVAL '7 day"
  },
  {
    "NL": "Find the total billed amount and the transaction date for all transactions that were part of campaigns with an ROI greater than 100% and used the payment method 'Credit Card'.",
    "Query": "SELECT SUM(billed\\_amount) as total\\_billed\\_amount, transaction\\_date\nFROM transactions\nWHERE campaign\\_roi > 100 AND payment\\_method = 'Credit Card'\nGROUP BY transaction\\_da"
  },
  {
    "NL": "Find the total amount spent by each customer on orders that included items with a warranty period of more than 1 year, and include only those orders which were shipped after January 1, 2023.",
    "Query": "SELECT customer\\_id, SUM(order\\_amount)\nFROM orders\nJOIN order\\_items ON orders.id = order\\_items.order\\_id\nWHERE warranty\\_period > 12 AND shipped\\_date > '2023-01-01'\nGROUP BY customer\\_"
  },
  {
    "NL": "Find the total time spent on events by customers who have completed a survey, grouped by their device platform.",
    "Query": "SELECT device\\_platform, SUM(time\\_spent)\nFROM events\nJOIN customers ON events.customer\\_id = customers.customer\\_id\nWHERE survey\\_completed = true\nGROUP BY device\\_platfo"
  },
  {
    "NL": "Find the total number of push notifications clicked for events happening in the last 30 days.",
    "Query": "SELECT COUNT(\\*) FROM push\\_notifications\nJOIN events ON push\\_notifications.event\\_id = events.id\nWHERE events.date >= NOW() - INTERVAL '30 days' AND push\\_notifications.clicked = TR"
  },
  {
    "NL": "What are the total amount and order status of orders made by customers who have clicked push notifications and have also completed surveys, along with the total time spent and discount applied in their corresponding events?",
    "Query": "SELECT \n    o.total\\_amount, o.order\\_status, \n    SUM(e1.time\\_spent) as total\\_time\\_spent, \n    e2.discount \nFROM \n    orders o \nJOIN \n    customer\\_events ce1 ON o.customer\\_id = ce1.customer\\_id \n                            AND ce1.event\\_type = 'clicked\\_push\\_notifications' \nJOIN \n    customer\\_events ce2 ON o.customer\\_id = ce2.customer\\_id \n                            AND ce2.event\\_type = 'completed\\_surveys' \nJOIN \n    event\\_details e1 ON ce1.event\\_id = e1.event\\_id \nJOIN \n    event\\_details e2 ON ce2.event\\_id = e2.event\\_id \nWHERE \n    e1.event\\_type = 'clicked\\_push\\_notifications' \n    AND e2.event\\_type = 'completed\\_surveys' \nGROUP BY \n    o.total\\_amount, o.order\\_status, e2.discou"
  },
  {
    "NL": "List all orders that have a payment status of paid and were shipped via a carrier other than UPS",
    "Query": "SELECT * FROM orders \nWHERE payment\\_status = 'paid' \nAND shipping\\_carrier != 'UP"
  },
  {
    "NL": "Get the first and last name of customers who have placed an order with a total amount of more than $1000 and have an active subscription.",
    "Query": "SELECT first\\_name, last\\_name\nFROM customers\nWHERE total\\_amount > 1000 AND subscription\\_status = 'activ"
  },
  {
    "NL": "Find the loyalty membership unique identifiers for customers who made more than $1000 in transactions and received a special discount on their birthday.",
    "Query": "Sure, here's the SQL query for your natural language query:\n```sql\nSELECT DISTINCT loyalty_membership_id\nFROM transactions\nJOIN customers ON transactions.customer_id = customers.customer_id\nWHERE transactions.transaction_amount > 1000\nAND customers.birthday_discount = true;\n```\nNote that I'm assuming there are two tables, `transactions` and `customers`, and that the `transactions` table has columns `customer_id` and `transaction_amount`, and the `customers` table has columns `customer_id`, `loyalty_membership_id`, and `birthday_discount`. You may need to adjust the table and column names to match your actual database sche"
  },
  {
    "NL": "Get the number of customers who are premium and have more than 10000 loyalty points.",
    "Query": "SELECT COUNT(\\*) FROM customers WHERE is\\_premium = TRUE AND loyalty\\_points > 100"
  },
  {
    "NL": "What is the average total amount of orders for each city, along with the corresponding number of orders and customers in that city?",
    "Query": "SELECT city, AVG(total\\_amount), COUNT(DISTINCT order\\_id) as number\\_of\\_orders, COUNT(DISTINCT customer\\_id) as number\\_of\\_customers\nFROM orders\nJOIN customers ON orders.customer\\_id = customers.customer\\_id\nGROUP BY ci"
  },
  {
    "NL": "Retrieve the product display names and their associated supplier reference IDs for products that have been in stock for less than 10 units and have not been restocked since before January 1, 2023, and are in the 'Electronics' category.",
    "Query": "SELECT product_display_name, supplier_reference_id\nFROM products\nWHERE in_stock < 10 AND last_restock < '2023-01-01' AND category = 'Electronic"
  },
  {
    "NL": "What are the product names and prices of the items in the cart for a specific user?",
    "Query": "SELECT product\\_name, price\nFROM cart\nWHERE user\\_id = specific\\_user\\_"
  },
  {
    "NL": "Find the total number of transactions made by customers who have an active subscription, have a premium account, and have made a purchase in the last 30 days, and also find the average loyalty points earned by these customers, and the total average amount spent per order by these customers, and the average review score given by these customers for their transactions.",
    "Query": "SELECT \n    COUNT(DISTINCT t.customer\\_id) AS total\\_customers,\n    AVG(lp.loyalty\\_points) AS avg\\_loyalty\\_points,\n    AVG(t.amount) AS avg\\_amount\\_per\\_order,\n    AVG(r.score) AS avg\\_review\\_score\nFROM \n    transactions t\nJOIN \n    customer\\_subscriptions cs ON t.customer\\_id = cs.customer\\_id\nJOIN \n    customer\\_accounts ca ON t.customer\\_id = ca.customer\\_id\nJOIN \n    loyalty\\_points lp ON t.transaction\\_id = lp.transaction\\_id\nJOIN \n    reviews r ON t.transaction\\_id = r.transaction\\_id\nWHERE \n    cs.status = 'active' AND ca.account\\_type = 'premium' AND t.transaction\\_date >= NOW() - INTERVAL '30 day"
  },
  {
    "NL": "Find the average click count and total cart value for events of type 'Product View' on the 'Android' platform.",
    "Query": "SELECT AVG(click_count), SUM(cart_value)\nFROM events\nWHERE event_type = 'Product View' AND platform = 'Androi"
  },
  {
    "NL": "Find the total number of products that are active and have more than 1000 verified reviews.",
    "Query": "SELECT COUNT(\\*) FROM products\nWHERE is\\_active = TRUE AND verified\\_reviews > 10"
  },
  {
    "NL": "Find the number of suppliers for each country of operation, sorted in descending order.",
    "Query": "SELECT country, COUNT(*) as supplier\\_count\nFROM suppliers\nGROUP BY country\nORDER BY supplier\\_count DE"
  },
  {
    "NL": "Retrieve the total refund amount and the date when the refund was processed for orders that had events marked as 'Return'.",
    "Query": "SELECT SUM(refund\\_amount) as total\\_refund\\_amount, processed\\_date\nFROM orders\nJOIN refunds ON orders.id = refunds.order\\_id\nJOIN event\\_logs ON orders.id = event\\_logs.order\\_id\nWHERE event\\_logs.event\\_type = 'Return'\nGROUP BY processed\\_da"
  },
  {
    "NL": "Find the total number of customers who are eligible for special promotions.",
    "Query": "SELECT COUNT(\\*) FROM customers WHERE is\\_eligible\\_for\\_promotion = TR"
  },
  {
    "NL": "Find all products that have a standard retail price greater than 200 and an available stock quantity in units greater than 10",
    "Query": "SELECT * FROM products WHERE standard\\_retail\\_price > 200 AND available\\_stock\\_quantity >"
  },
  {
    "NL": "List all the customers who have two-factor authentication enabled and their loyalty points",
    "Query": "SELECT customers.*, authentication\\_factors.two\\_factor\\_enabled, loyalty\\_points\nFROM customers\nJOIN authentication\\_factors ON customers.id = authentication\\_factors.customer\\_id\nJOIN loyalty\\_program ON customers.id = loyalty\\_program.customer\\_"
  },
  {
    "NL": "What is the average total transaction amount for orders with a total amount greater than $1000, and what is the average number of loyalty points earned for these transactions, considering only customers who have participated in the exclusive beta testing program and have a loyalty membership unique identifier greater than 5000, and have made a payment using the same billing and shipping address, and have not had any chargeback requests, and their transaction status is 'completed', and the transaction date and time is within the last 6 months?",
    "Query": "SELECT AVG(total\\_transaction\\_amount), AVG(loyalty\\_points)\nFROM orders\nWHERE total\\_transaction\\_amount > 1000\nAND customer\\_id IN (\n    SELECT customer\\_id\n    FROM customers\n    WHERE beta\\_tester = true\n    AND loyalty\\_membership\\_id > 5000\n    AND billing\\_address = shipping\\_address\n    AND chargeback\\_request = false\n)\nAND transaction\\_status = 'completed'\nAND transaction\\_date >= NOW() - INTERVAL '6 month"
  },
  {
    "NL": "Analyze the inventory data to identify products that are frequently restocked but have low sales volume. Specifically, find products that have been restocked more than 5 times in the last year, have a stock turnover rate less than 0.5, and have not been part of any completed orders within the last year. Additionally, include the last updated timestamp, expiry date, and the total quantity sold for each product.",
    "Query": "SELECT i.product_id, i.last_updated, i.expiry_date, SUM(o.quantity) as total_quantity_sold\nFROM inventory i\nLEFT JOIN restocking r ON i.product_id = r.product_id\nLEFT JOIN orders o ON i.product_id = o.product_id\nWHERE r.restock_count > 5\nAND i.stock_turnover_rate < 0.5\nAND o.order_status = 'completed' AND o.order_date < NOW() - INTERVAL '1 year'\nAND r.restock_date >= NOW() - INTERVAL '1 year'\nGROUP BY i.product_id, i.last_updated, i.expiry_date\nHAVING COUNT(DISTINCT r.restock_id) ="
  },
  {
    "NL": "Retrieve the average time spent on the site by customers who clicked on a promotion email and placed an order.",
    "Query": "SELECT AVG(time\\_spent\\_on\\_site) \nFROM customers \nWHERE clicked\\_promotion\\_email = true AND placed\\_order = tr"
  },
  {
    "NL": "List the number of customers grouped by their marital status and average income.",
    "Query": "SELECT marital\\_status, AVG(income), COUNT(\\*) \nFROM customers \nGROUP BY marital\\_stat"
  },
  {
    "NL": "Retrieve the total discounted price and the estimated delivery date for all items in the cart that are also available in the products table.",
    "Query": "SELECT SUM(cart.price \\* (1 - cart.discount)) AS total\\_discounted\\_price, products.estimated\\_delivery\\_date\nFROM cart\nJOIN products ON cart.item\\_id = products.id\nWHERE cart.item\\_id IN (SELECT id FROM product"
  },
  {
    "NL": "Find the total loyalty points earned by customers who have made transactions in the last month and have an anniversary reward voucher status of true",
    "Query": "SELECT SUM(loyalty\\_points)\nFROM customers\nWHERE transaction\\_date >= NOW() - INTERVAL '1 month'\nAND anniversary\\_reward\\_voucher = tr"
  },
  {
    "NL": "Find the number of events where the event type is 'ORDER_COMPLETION' and the device platform is 'ANDROID', and the customer has also left a review with 5 stars. Then, group these events by the event timestamp and find the total number of such events for each group. Finally, find the top 5 results with the highest total number of events.",
    "Query": "SELECT event_timestamp, COUNT(*) \nFROM events \nWHERE event_type = 'ORDER_COMPLETION' AND device_platform = 'ANDROID' AND customer_review = 5 \nGROUP BY event_timestamp \nORDER BY COUNT(*) DESC \nLIMIT"
  },
  {
    "NL": "Find all users who have 'free shipping eligibility' as true and also have products in the wishlist which are currently out of stock.",
    "Query": "SELECT *\nFROM users\nWHERE free\\_shipping = true AND user\\_id IN (\n    SELECT user\\_id\n    FROM wishlist\n    WHERE product\\_id IN (\n        SELECT product\\_id\n        FROM products\n        WHERE stock = 0\n    )"
  },
  {
    "NL": "Get the total value of all carts for users who have completed a survey and have a cart status of 'active'",
    "Query": "SELECT SUM(carts.value)\nFROM carts\nJOIN users ON carts.user\\_id = users.id\nWHERE users.survey\\_completed = true AND carts.status = 'activ"
  },
  {
    "NL": "Find the total shipping costs and the estimated delivery dates for orders that were part of successful campaigns (ROI > 100%) and had at least one item that was part of a refund request. Include the campaign name, shipping carrier, and the total price of items in the order.",
    "Query": "SELECT c.campaign\\_name, s.shipping\\_carrier, SUM(o.item\\_price) AS total\\_item\\_price, SUM(o.shipping\\_cost) AS total\\_shipping\\_cost, AVG(o.estimated\\_delivery\\_date) AS estimated\\_delivery\\_date\nFROM orders o\nJOIN campaigns c ON o.campaign\\_id = c.campaign\\_id\nJOIN shipments s ON o.shipment\\_id = s.shipment\\_id\nJOIN (\n    SELECT order\\_id\n    FROM refund\\_requests\n    GROUP BY order\\_id\n    HAVING COUNT(*) > 0\n) r ON o.order\\_id = r.order\\_id\nWHERE c.roi > 100\nGROUP BY c.campaign\\_name, s.shipping\\_carri"
  },
  {
    "NL": "Get the campaign name and total reach for campaigns where the target audience is the same as the brand name of products in the wishlist",
    "Query": "SELECT campaigns.name, SUM(campaigns\\_reports.reach) as total\\_reach\nFROM campaigns\nJOIN products ON campaigns.brand\\_id = products.brand\\_id\nJOIN wishlists ON products.id = wishlists.product\\_id\nJOIN campaigns\\_reports ON campaigns.id = campaigns\\_reports.campaign\\_id\nWHERE campaigns.target\\_audience = (SELECT brand\\_name FROM brands WHERE brands.id = products.brand\\_id)\nGROUP BY campaigns.na"
  },
  {
    "NL": "Find the number of events where a survey was completed.",
    "Query": "SELECT COUNT(\\*) FROM events WHERE survey_completed = TR"
  },
  {
    "NL": "Find the total number of customers who have participated in the exclusive beta testing and have a loyalty membership unique identifier greater than 50000.",
    "Query": "SELECT COUNT(\\*) FROM customers \nWHERE participated\\_in\\_beta = TRUE AND loyalty\\_membership\\_id > 500"
  },
  {
    "NL": "Find all the chargeback dispute reasons from the transactions_and_payments table.",
    "Query": "SELECT dispute\\_reason FROM transactions\\_and\\_paymen"
  },
  {
    "NL": "Get the product identifier, review rating, and review feedback for reviews with a rating greater than 4 and a review length greater than 100 characters.",
    "Query": "SELECT product\\_id, rating, feedback \nFROM reviews \nWHERE rating > 4 AND length(feedback) > 1"
  },
  {
    "NL": "Find the average shipping fee for orders that were created from carts where the estimated delivery date is before June 1, 2023, and the cart status is 'completed'.",
    "Query": "SELECT AVG(shipping_fee)\nFROM orders\nWHERE estimated_delivery_date < '2023-06-01' AND cart_status = 'complete"
  },
  {
    "NL": "Get the refund amount and refund status for all refunds where the refund method is 'credit' and the status is 'processed'.",
    "Query": "SELECT refund\\_amount, refund\\_status\nFROM refunds\nWHERE refund\\_method = 'credit' AND refund\\_status = 'processe"
  },
  {
    "NL": "Find the names of customers who have accumulated more than 1000 loyalty points and are eligible for special promotions.",
    "Query": "SELECT name \nFROM customers \nWHERE loyalty_points > 1000 AND is\\_eligible_for_special\\_promotions = TR"
  },
  {
    "NL": "Retrieve the first name, last name, and total amount spent by each premium customer in transactions, along with the number of transactions they made.",
    "Query": "SELECT first\\_name, last\\_name, SUM(amount) as total\\_amount\\_spent, COUNT(*) as number\\_of\\_transactions\nFROM transactions\nJOIN customers ON transactions.customer\\_id = customers.customer\\_id\nWHERE customers.customer\\_type = 'premium'\nGROUP BY first\\_name, last\\_na"
  },
  {
    "NL": "Retrieve the total transaction amounts and referral bonus points earned for customers who participated in the exclusive beta testing and have personalized product recommendations.",
    "Query": "SELECT SUM(transaction\\_amount) AS total\\_transaction\\_amount, SUM(referral\\_bonus\\_points) AS referral\\_bonus\\_points\nFROM customers\nWHERE participated\\_in\\_beta = TRUE AND has\\_personalized\\_recommendations = TR"
  },
  {
    "NL": "What are the product names and quantities of all items in orders with a total price greater than $100?",
    "Query": "SELECT product\\_name, quantity\nFROM orders\nJOIN order\\_items ON orders.id = order\\_items.order\\_id\nWHERE total\\_price > 1"
  },
  {
    "NL": "Retrieve details of all wishlisted products where the price at addition is less than 50% of the current purchase price of the product in inventory, and the product has been on the wishlist for more than 30 days but has not been viewed in the last 15 days, also provide the name of the product, the user's ID who added it to the wishlist, and the current stock status of the product.",
    "Query": "SELECT p.name, w.user\\_id, i.stock\\_status\nFROM wishlist w\nJOIN product p ON w.product\\_id = p.id\nJOIN inventory i ON p.id = i.product\\_id\nWHERE i.purchase\\_price * 0.5 > (\n    SELECT w2.addition\\_price\n    FROM wishlist w2\n    WHERE w2.product\\_id = w.product\\_id AND w2.user\\_id = w.user\\_id\n) AND w.added\\_date < NOW() - INTERVAL '30 days'\nAND w.last\\_viewed_date < NOW() - INTERVAL '15 day"
  },
  {
    "NL": "What is the shipping status of the orders which have estimated delivery before '2022-01-01'?",
    "Query": "SELECT shipping\\_status\nFROM orders\nWHERE estimated\\_delivery < '2022-01-0"
  },
  {
    "NL": "Retrieve all product names and their associated supplier reference IDs for products that have a minimum threshold for restocking set to 5 or less and have a promotional discount applied, showing only active products.",
    "Query": "SELECT product\\_name, supplier\\_reference\\_id\nFROM products\nWHERE restocking\\_threshold <= 5 AND promotional\\_discount = TRUE AND active = TR"
  },
  {
    "NL": "Find all orders where the total amount is greater than 100 and the shipping fee is less than 20.",
    "Query": "SELECT * FROM orders WHERE total\\_amount > 100 AND shipping\\_fee <"
  },
  {
    "NL": "Retrieve the number of unique customers who added items to their wishlist from a mobile device and have at least one item with a reminder set.",
    "Query": "Sure, here's the SQL query for your natural language query:\n```sql\nSELECT COUNT(DISTINCT customer_id)\nFROM wishlist_items\nWHERE device = 'mobile' AND reminder IS NOT NULL;\n```\nThis query retrieves the number of unique customers (`COUNT(DISTINCT customer_id)`) who added items to their wishlist from a mobile device (`WHERE device = 'mobile'`) and have at least one item with a reminder set (`AND reminder IS NOT NULL`). The `wishlist_items` table is assumed to have columns `customer_id`, `device`, and `reminde"
  },
  {
    "NL": "What is the total amount and tax amount for all orders?",
    "Query": "SELECT SUM(total\\_amount) AS total\\_amount, SUM(tax\\_amount) AS tax\\_amount\nFROM orde"
  },
  {
    "NL": "List the event types and their timestamps for customers who have a loyalty points balance greater than 500, and find out the event types that occurred on weekends.",
    "Query": "```sql\nSELECT event_type, timestamp\nFROM events\nWHERE customer_id IN (\n    SELECT customer_id\n    FROM loyalty_points\n    WHERE balance > 500\n) AND EXTRACT(DOW FROM timestamp) IN (0, 6);"
  },
  {
    "NL": "Show all reviews with a star rating greater than 4.",
    "Query": "SELECT * FROM reviews WHERE star\\_rating >"
  },
  {
    "NL": "Find the names of the customers who made previous purchases and submitted reviews with more than 4 stars and are verified, and their corresponding review ratings.",
    "Query": "SELECT customers.name, reviews.rating\nFROM customers\nJOIN purchases ON customers.id = purchases.customer\\_id\nJOIN reviews ON purchases.id = reviews.purchase\\_id\nWHERE reviews.rating > 4 AND customers.verified = tr"
  },
  {
    "NL": "Find all customer information with their review ratings and the associated review image URLs for customers who have submitted a review with a rating of 5 stars and number of helpful votes received is greater than 10.",
    "Query": "SELECT customers.*, reviews.rating, reviews.review\\_image\\_url\nFROM customers\nJOIN reviews ON customers.customer\\_id = reviews.customer\\_id\nWHERE reviews.rating = 5 AND reviews.num\\_helpful\\_votes >"
  },
  {
    "NL": "Find the total amount spent on all orders for which email was opened and the payment method was 'PayPal'.",
    "Query": "SELECT SUM(amount)\nFROM orders\nWHERE email_opened = TRUE AND payment_method = 'PayPa"
  },
  {
    "NL": "Find the total revenue generated by all campaigns with a budget greater than $1000, along with the total number of clicks and impressions for each campaign, and also include the number of customers who made a purchase after clicking on an ad, and the total amount they spent, grouped by campaign name",
    "Query": "SELECT campaign\\_name,\n       SUM(revenue) AS total\\_revenue,\n       SUM(clicks) AS total\\_clicks,\n       SUM(impressions) AS total\\_impressions,\n       SUM(purchase\\_amount) AS total\\_purchase\\_amount,\n       COUNT(DISTINCT customer\\_id) AS unique\\_customers\nFROM campaigns\nWHERE budget > 1000\nGROUP BY campaign\\_na"
  },
  {
    "NL": "List the total amount and discount applied for each order for orders made in 2023.",
    "Query": "SELECT \n    order\\_id, \n    SUM(total\\_amount) AS total\\_amount, \n    SUM(discount) AS discount\nFROM \n    orders\nWHERE \n    order\\_date >= '2023-01-01' AND order\\_date < '2024-01-01'\nGROUP BY \n    order\\_"
  },
  {
    "NL": "Find all orders that were shipped in the last month and list their shipping status, estimated delivery date, and shipping cost.",
    "Query": "SELECT shipping\\_status, estimated\\_delivery\\_date, shipping\\_cost\nFROM orders\nWHERE shipped\\_date >= NOW() - INTERVAL '1 mont"
  },
  {
    "NL": "What are the product names and average review ratings of all products that have more than 100 reviews?",
    "Query": "SQL query:\n```sql\nSELECT product_name, AVG(review_rating)\nFROM products\nGROUP BY product_name\nHAVING COUNT(review_id) > 100;"
  },
  {
    "NL": "Retrieve the average total price of all order items shipped to customers in the state of New York, along with the count of such orders.",
    "Query": "SELECT AVG(total) AS average\\_total\\_price, COUNT(*) AS order\\_count\nFROM order\\_items\nJOIN orders ON order\\_items.order\\_id = orders.id\nWHERE orders.shipping\\_state = 'New Yor"
  },
  {
    "NL": "Calculate the total refund amount for each product that was part of a campaign and identify the campaign name and type for each product.",
    "Query": "SELECT p.product\\_name, c.campaign\\_name, c.campaign\\_type, SUM(r.refund\\_amount) as total\\_refund\\_amount\nFROM products p\nJOIN campaign\\_participation cp ON p.product\\_id = cp.product\\_id\nJOIN campaigns c ON cp.campaign\\_id = c.campaign\\_id\nJOIN refunds r ON p.product\\_id = r.product\\_id\nGROUP BY p.product\\_name, c.campaign\\_name, c.campaign\\_ty"
  },
  {
    "NL": "Retrieve the last restock date and the primary contact person name for suppliers who have supplied products with a purchase price greater than 100.",
    "Query": "Here's the SQL query for your natural language query:\n\n```sql\nSELECT s.last_restock_date, p.name AS primary_contact_person\nFROM suppliers s\nJOIN supplier_contacts sc ON s.id = sc.supplier_id\nJOIN people p ON sc.person_id = p.id\nJOIN products p2 ON s.id = p2.supplier_id\nWHERE p2.purchase_price > 100\nORDER BY s.last_restock_date DESC\nLIMIT 1;\n```\n\nNote: This query assumes that the table and column names are as follows:\n\n* suppliers: suppliers table\n* last\\_restock\\_date: column for the last restock date in the suppliers table\n* supplier\\_contacts: table for supplier contacts\n* supplier\\_id: column for the supplier ID in the supplier\\_contacts table\n* person\\_id: column for the person ID in the supplier\\_contacts table\n* people: table for people\n* name: column for the name of the person in the people table\n* products: table for products\n* purchase\\_price: column for the purchase price of the product in the products table\n* id: column for the ID of the supplier in the suppliers table and the product in the products tab"
  },
  {
    "NL": "Find the email open rate, campaign name, and shipping cost for each campaign, along with the estimated delivery date and shipping address of the corresponding shipping order.",
    "Query": "SELECT \ncampaigns.name AS campaign\\_name,\nROUND(SUM(email\\_opens.opened) / COUNT(email\\_blasts.id) * 100, 2) AS email\\_open\\_rate,\nshipping\\_orders.estimated\\_delivery\\_date,\nshipping\\_orders.shipping\\_address,\nshipping\\_orders.cost AS shipping\\_cost\nFROM \ncampaigns\nJOIN email\\_blasts ON campaigns.id = email\\_blasts.campaign\\_id\nJOIN email\\_opens ON email\\_blasts.id = email\\_opens.email\\_blast\\_id\nJOIN shipping\\_orders ON email\\_blasts.order\\_id = shipping\\_orders.id\nGROUP BY \ncampaigns.id,\nshipping\\_orders.estimated\\_delivery\\_date,\nshipping\\_orders.shipping\\_address,\nshipping\\_orders.co"
  },
  {
    "NL": "What is the total amount for orders and the corresponding order item id where payment status is paid?",
    "Query": "SELECT SUM(amount) as total\\_amount, order\\_item\\_id\nFROM orders\nJOIN order\\_items ON orders.id = order\\_items.order\\_id\nWHERE payment\\_status = 'paid'\nGROUP BY order\\_item\\_"
  },
  {
    "NL": "Find the total final billed amount for all transactions that occurred in the year 2022 and had a refund initiated.",
    "Query": "SELECT SUM(final\\_billed\\_amount)\nFROM transactions\nWHERE YEAR(transaction\\_date) = 2022 AND refund\\_initiated = TR"
  },
  {
    "NL": "Retrieve the customer details of all premium users who have an active subscription and have made more than 10 orders.",
    "Query": "SELECT * FROM customers \nWHERE user\\_type = 'premium' \nAND subscription\\_status = 'active' \nAND order\\_count >"
  },
  {
    "NL": "Find all customers who have at least one item in their wishlist and have an active subscription, along with the estimated delivery date of their shipments.",
    "Query": "SELECT c.customer\\_id, c.name, w.item\\_id, s.subscription\\_status, s.estimated\\_delivery\\_date\nFROM customers c\nJOIN wishlists w ON c.customer\\_id = w.customer\\_id\nJOIN subscriptions s ON c.customer\\_id = s.customer\\_id\nWHERE s.subscription\\_status = 'activ"
  },
  {
    "NL": "What is the average star rating given by customers who have made more than 5 previous purchases?",
    "Query": "SELECT AVG(star\\_rating) \nFROM purchases \nWHERE customer\\_id IN (\n    SELECT customer\\_id \n    FROM purchases \n    GROUP BY customer\\_id \n    HAVING COUNT(\\*) > 5"
  },
  {
    "NL": "Find the official supplier business name, registered business address, and primary contact person name for each supplier who has supplied products to a customer who has placed an order, returned or requested a refund on a product that was added to their wishlist during the last 6 months, and also find the campaign name for each campaign that has a budget greater than the average spent for each campaign, the campaign start date, and the campaign end date.",
    "Query": "```sql\nSELECT s.business_name, s.registered_address, p.name, c.campaign_name, c.start_date, c.end_date\nFROM suppliers s\nJOIN supplier_orders so ON s.id = so.supplier_id\nJOIN orders o ON so.order_id = o.id\nJOIN order_items oi ON o.id = oi.order_id\nJOIN wishlist w ON oi.product_id = w.product_id AND oi.order_id = w.order_id\nJOIN returns r ON oi.product_id = r.product_id AND oi.order_id = r.order_id\nJOIN campaigns c ON r.campaign_id = c.id\nJOIN (\n    SELECT campaign_id, AVG(budget) as avg_budget\n    FROM campaigns\n    GROUP BY campaign_id\n) cb ON c.id = cb.campaign_id\nWHERE r.return_date >= NOW() - INTERVAL '6 months'\nAND c.budget > cb.avg_budget;"
  },
  {
    "NL": "Identify the top 10 suppliers with the highest average supplier rating, and list the total number of products they have supplied, the total quantity of their products in the inventory, and the average purchase price of their products. Also, find the average rating of the reviews for their products and the total number of reviews for their products. Filter the results to only include suppliers who have supplied products with a shelf life of more than 30 days.",
    "Query": "```sql\nSELECT s.supplier_id,\n       s.supplier_name,\n       AVG(r.supplier_rating) AS avg_supplier_rating,\n       COUNT(DISTINCT p.product_id) AS total_products_supplied,\n       SUM(i.quantity) AS total_quantity_in_inventory,\n       AVG(i.purchase_price) AS avg_purchase_price,\n       AVG(r.review_rating) AS avg_review_rating,\n       COUNT(r.review_id) AS total_reviews\nFROM suppliers s\nJOIN products p ON s.supplier_id = p.supplier_id\nJOIN inventory i ON p.product_id = i.product_id\nJOIN reviews r ON p.product_id = r.product_id\nWHERE p.shelf_life > 30\nGROUP BY s.supplier_id, s.supplier_name\nORDER BY avg_supplier_rating DESC\nLIMIT 10;"
  },
  {
    "NL": "Find the total billed amount for all transactions initiated by customers from a specific country, say 'USA', who made a payment using a digital wallet.",
    "Query": "SELECT SUM(billed_amount)\nFROM transactions\nWHERE initiator_country = 'USA' AND payment_method = 'digital walle"
  },
  {
    "NL": "Find the total revenue generated from campaigns that used the discount code 'SUMMER2023'.",
    "Query": "SELECT SUM(revenue) FROM campaigns WHERE discount_code = 'SUMMER202"
  },
  {
    "NL": "Find all refund requests that were processed within the last 30 days and were made for products supplied by 'TechGiants Inc.'.",
    "Query": "SELECT * FROM refund\\_requests \nWHERE processed\\_date >= NOW() - INTERVAL '30 days' \nAND supplier = 'TechGiants Inc"
  },
  {
    "NL": "What are the campaign names and their corresponding campaign statuses?",
    "Query": "SELECT campaign\\_name, campaign\\_status\nFROM campaig"
  },
  {
    "NL": "Find all customers who have shopped at least once, have a loyalty membership, and have provided feedback with an engagement score greater than 0.5. Also, list the average rating of the products they have reviewed, the total loyalty points they have accumulated, and the number of times they have edited their reviews. Filter the results to only include customers who are eligible for special promotions and have a loyalty tier level of 'Gold' or higher.",
    "Query": "SELECT c.customer\\_id, c.name, AVG(r.rating) AS average\\_rating, SUM(l.points) AS loyalty\\_points, COUNT(er.review\\_id) AS review\\_edits\nFROM customers c\nJOIN orders o ON c.customer\\_id = o.customer\\_id\nJOIN loyalty l ON c.customer\\_id = l.customer\\_id\nJOIN reviews r ON c.customer\\_id = r.customer\\_id\nJOIN engagement e ON c.customer\\_id = e.customer\\_id\nJOIN eligible\\_promotions ep ON c.customer\\_id = ep.customer\\_id\nJOIN edit\\_reviews er ON r.review\\_id = er.review\\_id\nWHERE o.order\\_count > 0 AND l.tier_level IN ('Gold', 'Platinum', 'Diamond') AND e.engagement_score > 0.5\nGROUP BY c.customer\\_id, c.na"
  },
  {
    "NL": "Get the total number of products supplied, average supplier rating, primary contact person name, and primary contact email address for each supplier who has not supplied any products to a customer who has placed an order and also has not supplied any products to a customer who has returned or requested a refund on a product that was added to their wishlist during the last 6 months, and also find the campaign name for each campaign that has a budget greater than the average spent for each campaign, the campaign start date, and the campaign end date.",
    "Query": "```sql\nSELECT \n    s.supplier_id, \n    COUNT(p.product_id) AS total_products_supplied, \n    AVG(r.rating) AS avg_supplier_rating, \n    pc.person_name AS primary_contact_person_name, \n    pc.email AS primary_contact_email, \n    c.campaign_name, \n    c.start_date, \n    c.end_date\nFROM \n    suppliers s\nLEFT JOIN \n    products p ON s.supplier_id = p.supplier_id\nLEFT JOIN \n    ratings r ON p.product_id = r.product_id\nLEFT JOIN \n    primary_contacts pc ON s.supplier_id = pc.supplier_id\nLEFT JOIN \n    campaigns c ON s.supplier_id = c.supplier_id\nLEFT JOIN \n    orders o ON p.product_id = o.product_id\nLEFT JOIN \n    refunds rf ON p.product_id = rf.product_id\nLEFT JOIN \n    wishlist_changes wc ON p.product_id = wc.product_id\nWHERE \n    o.order_id IS NULL AND \n    rf.refund_id IS NULL AND \n    wc.change_date < NOW() - INTERVAL '6 months'\nGROUP BY \n    s.supplier_id, \n    c.campaign_name, \n    c.start_date, \n    c.end_date\nHAVING \n    AVG(c.budget) > (\n        SELECT \n            AVG(cc.budget)\n        FROM \n            campaigns cc\n    );"
  },
  {
    "NL": "Find the total transaction amount and the average final billed amount for each order status from the transactions_and_payments and orders tables, excluding fraudulent transactions.",
    "Query": "SELECT o.order\\_status,\n       SUM(tp.transaction\\_amount) AS total\\_transaction\\_amount,\n       AVG(tp.final\\_billed\\_amount) AS average\\_final\\_billed\\_amount\nFROM orders o\nJOIN transactions\\_and\\_payments tp ON o.order\\_id = tp.order\\_id\nWHERE o.order\\_status != 'Fraudulent'\nGROUP BY o.order\\_stat"
  },
  {
    "NL": "Find the average transaction amount for each customer who has placed at least one transaction and also has orders in their cart, excluding those who have not logged in for more than a year.",
    "Query": "SELECT c.customer\\_id, AVG(t.transaction\\_amount)\nFROM customers c\nJOIN transactions t ON c.customer\\_id = t.customer\\_id\nJOIN carts cart ON c.customer\\_id = cart.customer\\_id\nWHERE t.transaction\\_date >= (CURRENT\\_DATE - INTERVAL '1 year')\nGROUP BY c.customer\\_"
  },
  {
    "NL": "Find the total number of orders made by customers who have given 5-star reviews and have purchased a product at least twice, along with the total amount spent by these customers and the average sentiment analysis score of their reviews",
    "Query": "SELECT COUNT(DISTINCT o.customer\\_id) AS num\\_orders,\n       SUM(o.total\\_amount) AS total\\_amount\\_spent,\n       AVG(r.sentiment\\_score) AS avg\\_sentiment\\_score\nFROM orders o\nJOIN reviews r ON o.customer\\_id = r.customer\\_id\nWHERE r.rating = 5\nGROUP BY o.customer\\_id\nHAVING COUNT(DISTINCT o.order\\_id) >="
  },
  {
    "NL": "Find the campaign id and total reach of all campaigns with a budget greater than $1000.",
    "Query": "SELECT campaign\\_id, SUM(reach) as total\\_reach\nFROM campaigns\nWHERE budget > 1000\nGROUP BY campaign\\_"
  },
  {
    "NL": "What is the count of customers with free shipping eligibility set to true?",
    "Query": "SELECT COUNT(\\*) FROM customers WHERE free\\_shipping = tr"
  },
  {
    "NL": "Find the customer birthday special discount status and the total discount amount redeemed for customers who have placed orders with a total amount greater than $50 and have a loyalty program tier level of 'Gold', including the product name and quantity of each order item, and the total transaction amount, grouped by the customer reference ID?",
    "Query": "SELECT c.customer\\_birthday\\_special\\_discount\\_status, c.total\\_discount\\_amount\\_redeemed, oi.product\\_name, oi.quantity, o.total\\_transaction\\_amount, c.customer\\_reference\\_id\nFROM customers c\nJOIN orders o ON c.customer\\_id = o.customer\\_id\nJOIN order\\_items oi ON o.order\\_id = oi.order\\_id\nWHERE o.total\\_amount > 50 AND c.loyalty\\_program\\_tier\\_level = 'Gold'\nGROUP BY c.customer\\_reference\\_"
  },
  {
    "NL": "Find the average annual loyalty spending threshold for customers who have participated in exclusive beta testing and have a higher total reach than the average total reach of all campaigns.",
    "Query": "SELECT AVG(loyalty\\_spending\\_threshold) \nFROM customers \nWHERE participated\\_beta\\_testing = TRUE \nAND total\\_reach > (\nSELECT AVG(total\\_reach) \nFROM campaigns"
  },
  {
    "NL": "List all campaigns that ended before January 1, 2023.",
    "Query": "SELECT * FROM campaigns WHERE end_date < '2023-01-0"
  },
  {
    "NL": "What are the product names and average ratings of products with more than 5 reviews in the wishlist?",
    "Query": "SELECT product\\_name, AVG(rating)\nFROM wishlist\nWHERE reviews > 5\nGROUP BY product\\_na"
  },
  {
    "NL": "What are the product names and the total price of each order item for all the orders with the campaign name 'Campaign X'?",
    "Query": "SELECT product\\_name, SUM(price) as total\\_price\nFROM order\\_items\nJOIN orders ON order\\_items.order\\_id = orders.id\nWHERE campaigns.name = 'Campaign X'\nGROUP BY product\\_na"
  },
  {
    "NL": "Retrieve the total number of loyalty points earned by each customer who has participated in the exclusive beta testing program.",
    "Query": "SELECT customer\\_id, SUM(loyalty\\_points)\nFROM customer\\_beta\\_testing\nGROUP BY customer\\_"
  },
  {
    "NL": "Find the total shipping cost for each order that has an estimated delivery date later than January 1, 2023, and list the results sorted by the shipping cost in descending order.",
    "Query": "SELECT order\\_id, SUM(shipping\\_cost) as total\\_shipping\\_cost\nFROM orders\nWHERE estimated\\_delivery\\_date > '2023-01-01'\nGROUP BY order\\_id\nORDER BY total\\_shipping\\_cost DE"
  },
  {
    "NL": "What is the average review rating of products with a retail price higher than 500 and a minimum threshold for restocking higher than 50, and what is the average textual review feedback length of these reviews?",
    "Query": "SELECT AVG(review\\_rating), AVG(LENGTH(review\\_text))\nFROM products\nWHERE retail\\_price > 500 AND restock\\_threshold >"
  },
  {
    "NL": "Get the average loyalty points of customers who have made at least one order",
    "Query": "SELECT AVG(loyalty_points) \nFROM customers \nWHERE customer_id IN (SELECT customer_id FROM order"
  },
  {
    "NL": "Find the total amount of all orders placed and the corresponding final billed amount for transactions where the first time customer transaction flag is true.",
    "Query": "SELECT SUM(total\\_amount) AS total\\_order\\_amount, SUM(final\\_billed\\_amount) AS total\\_billed\\_amount\nFROM orders\nWHERE first\\_time\\_customer\\_transaction = tr"
  },
  {
    "NL": "List the campaign names and the number of customers who have made a purchase through each campaign in the last 60 days.",
    "Query": "SELECT campaign\\_name, COUNT(DISTINCT customer\\_id)\nFROM purchases\nWHERE purchase\\_date >= NOW() - INTERVAL '60 days'\nGROUP BY campaign\\_na"
  },
  {
    "NL": "Find the total number of customers who are premium members and have made at least one order in the last year, along with the average time spent on the site.",
    "Query": "SELECT COUNT(DISTINCT c.customer\\_id) AS total\\_premium\\_customers,\n       AVG(time\\_spent\\_on\\_site) AS avg\\_time\\_spent\nFROM customers c\nJOIN orders o ON c.customer\\_id = o.customer\\_id\nWHERE c.membership\\_level = 'premium'\nAND o.order\\_date >= NOW() - INTERVAL '1 yea"
  },
  {
    "NL": "Find the total amount spent by customers who have made more than one transaction.",
    "Query": "SELECT SUM(amount) FROM transactions GROUP BY customer\\_id HAVING COUNT(*) >"
  },
  {
    "NL": "Find the total revenue generated from all campaigns that ended after January 1, 2023.",
    "Query": "SELECT SUM(revenue) \nFROM campaigns \nWHERE end_date > '2023-01-0"
  },
  {
    "NL": "Find the customers who have purchased products with an average rating greater than 4 and get the product name and rating for each of them.",
    "Query": "SELECT p.product\\_name, p.rating\nFROM customers c\nJOIN purchases p ON c.customer\\_id = p.customer\\_id\nGROUP BY p.product\\_name, p.rating\nHAVING AVG(p.rating) >"
  },
  {
    "NL": "How many orders were placed during a campaign with id 1?",
    "Query": "SELECT COUNT(\\*) FROM orders WHERE campaign\\_id ="
  },
  {
    "NL": "List the customers who have ordered items with a warranty period of more than 2 years.",
    "Query": "SELECT customers.*\nFROM customers\nJOIN orders ON customers.customer\\_id = orders.customer\\_id\nJOIN items ON orders.item\\_id = items.item\\_id\nWHERE items.warranty\\_period >"
  },
  {
    "NL": "Find all transactions where the customer has not previously made a purchase and the order was shipped to a billing address in the same city as the shipping address.",
    "Query": "SELECT *\nFROM transactions t1\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM transactions t2\n    WHERE t2.customer\\_id = t1.customer\\_id AND t2.transaction\\_id < t1.transaction\\_id\n) AND t1.billing\\_city = t1.shipping\\_ci"
  },
  {
    "NL": "What is the total amount spent by customers who have accumulated more than 1000 loyalty points and have placed orders with a total amount greater than $100, including the total discount applied and the tax amount, grouped by the loyalty program tier level?",
    "Query": "SELECT loyalty\\_tier, SUM(total\\_amount + discount - tax) as total\\_spent\nFROM orders\nJOIN customers ON orders.customer\\_id = customers.customer\\_id\nWHERE loyalty\\_points > 1000 AND total\\_amount > 100\nGROUP BY loyalty\\_ti"
  },
  {
    "NL": "Find the average star rating of reviews for products with a net weight greater than 1 kilogram.",
    "Query": "SELECT AVG(reviews.star\\_rating)\nFROM products\nJOIN reviews ON products.id = reviews.product\\_id\nWHERE products.net\\_weight > 10"
  },
  {
    "NL": "Find the average rating of suppliers that have supplied more than 100 products.",
    "Query": "SELECT AVG(rating) \nFROM suppliers \nWHERE supplier\\_id IN (\n    SELECT supplier\\_id \n    FROM products \n    GROUP BY supplier\\_id \n    HAVING COUNT(\\*) > 100"
  },
  {
    "NL": "Get all wishlist items for users who have placed orders with a payment status of 'paid' and order status of 'delivered' and also get the shipping details of those orders.",
    "Query": "SELECT w., o.shipping\\_address, o.shipping\\_city, o.shipping\\_state, o.shipping\\_zip\nFROM wishlist w\nJOIN orders o ON w.user\\_id = o.user\\_id\nWHERE o.payment\\_status = 'paid' AND o.order\\_status = 'delivere"
  },
  {
    "NL": "Which customers have accumulated more than 1000 loyalty points and are eligible for free shipping?",
    "Query": "SELECT customer\\_id\nFROM customers\nWHERE loyalty\\_points > 1000 AND is\\_eligible\\_for\\_free\\_shipping = TR"
  },
  {
    "NL": "Get the average time spent per session and the average cart value for sessions where the email was opened and a push notification was clicked.",
    "Query": "SELECT AVG(time\\_spent\\_per\\_session), AVG(cart\\_value)\nFROM sessions\nWHERE email\\_opened = TRUE AND push\\_notification\\_clicked = TR"
  },
  {
    "NL": "Find the total revenue generated by each campaign along with the total number of transactions made during the campaign's active period.",
    "Query": "SELECT campaign, SUM(revenue) AS total\\_revenue, COUNT(*) AS total\\_transactions\nFROM transactions\nWHERE transaction\\_date BETWEEN campaign\\_start\\_date AND campaign\\_end\\_date\nGROUP BY campai"
  },
  {
    "NL": "Find all the customers who have a total order value greater than $1000, have their newsletter subscription enabled, have a premium account, and have returned at least one product with a restocking fee, and also find the average number of products supplied by the supplier with the highest average supplier rating who is operating in the same country as the customer, and the total shipping cost for all the orders of these customers.",
    "Query": "```sql\nSELECT c.customer_id, c.name, \n       AVG(s.rating) AS avg_supplier_rating, \n       AVG(o.quantity) AS avg_products_supplied, \n       SUM(o.shipping_cost) AS total_shipping_cost\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN order_items oi ON o.order_id = oi.order_id\nJOIN products p ON oi.product_id = p.product_id\nJOIN suppliers s ON p.supplier_id = s.supplier_id\nJOIN subscriptions sub ON c.customer_id = sub.customer_id\nWHERE o.total_value > 1000\n  AND sub.newsletter_subscription = true\n  AND c.account_type = 'premium'\n  AND p.restocking_fee IS NOT NULL\n  AND c.country = s.country\nGROUP BY c.customer_id, c.name, s.country\nORDER BY avg_supplier_rating DESC, total_shipping_cost DESC;"
  },
  {
    "NL": "Find the total revenue generated by campaigns that targeted customers who prefer a specific favorite category.",
    "Query": "SELECT SUM(revenue)\nFROM campaigns\nJOIN customers ON campaigns.customer\\_id = customers.customer\\_id\nJOIN preferences ON customers.preference\\_id = preferences.preference\\_id\nWHERE preferences.favorite\\_category = 'specific categor"
  },
  {
    "NL": "Identify the highest and lowest stock levels for products supplied by suppliers who have an average supplier rating of less than 3.5, along with the product's last updated date and the supplier's official business name.",
    "Query": "```sql\nSELECT p.product_id, p.stock_level, p.last_updated_date, s.official_business_name\nFROM products p\nJOIN suppliers s ON p.supplier_id = s.supplier_id\nWHERE s.average_rating < 3.5\nAND (p.stock_level = (SELECT MAX(stock_level) FROM products WHERE supplier_id = s.supplier_id)\nOR p.stock_level = (SELECT MIN(stock_level) FROM products WHERE supplier_id = s.supplier_id));"
  },
  {
    "NL": "What is the average refund amount and status for each return type?",
    "Query": "SELECT return\\_type, AVG(refund\\_amount), STRING\\_AGG(status, ', ') \nFROM returns \nGROUP BY return\\_ty"
  },
  {
    "NL": "Find all the transactions where the payment method used is 'visa' and the corresponding customer reference identifier is 12345.",
    "Query": "SELECT * FROM transactions \nWHERE payment_method = 'visa' \nAND customer_reference_id = 123"
  },
  {
    "NL": "Get the order id, total amount, and shipping fee for all orders with a payment status of 'paid' and a total amount greater than 100.",
    "Query": "SELECT order\\_id, total\\_amount, shipping\\_fee\nFROM orders\nWHERE payment\\_status = 'paid' AND total\\_amount > 1"
  },
  {
    "NL": "Which customers have spent more than $1000 in the last year and have a lifetime loyalty points earned of more than 5000, and also show the average loyalty points balance and the count of orders for these customers, including the top 3 products they have ordered with the highest retail price?",
    "Query": "```sql\nSELECT c.customer_id, \n       c.name, \n       AVG(lb.points_balance) AS avg_loyalty_points_balance,\n       COUNT(o.order_id) AS order_count,\n       array_agg(p.product_name ORDER BY op.retail_price DESC)[1:3] AS top_3_products\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN order_products op ON o.order_id = op.order_id\nJOIN loyalty_balance lb ON c.customer_id = lb.customer_id\nJOIN products p ON op.product_id = p.product_id\nWHERE o.order_date >= NOW() - INTERVAL '1 year'\n  AND lb.points_earned > 5000\n  AND op.retail_price > 1000\nGROUP BY c.customer_id, c.name\nHAVING COUNT(o.order_id) > 0;"
  },
  {
    "NL": "Find the number of orders and total amount of all orders for each shipping state that have a discount applied.",
    "Query": "SELECT shipping\\_state, COUNT(*) as number\\_of\\_orders, SUM(total\\_amount) as total\\_amount\nFROM orders\nWHERE discount IS NOT NULL\nGROUP BY shipping\\_sta"
  },
  {
    "NL": "Find all the carts where the total price is greater than 50 and the cart status is 'active'.",
    "Query": "SELECT * FROM carts WHERE total\\_price > 50 AND cart\\_status = 'activ"
  },
  {
    "NL": "What is the total amount spent by customers who have accumulated more than 1000 loyalty points, have a loyalty program tier level of 'gold', have not had any chargeback requests, have made a payment using the same billing and shipping address, have purchased at least one item with a price per unit greater than $50, and have a customer feedback engagement score greater than 4, and what is the average number of loyalty points earned by these customers, considering only orders with a total amount greater than $500 and a delivery date within the last 3 months?",
    "Query": "```sql\nSELECT \n    SUM(order_total) AS total_amount_spent,\n    AVG(loyalty_points) AS avg_loyalty_points\nFROM \n    orders o\nJOIN \n    customers c ON o.customer_id = c.customer_id\nJOIN \n    loyalty_program lp ON c.customer_id = lp.customer_id\nWHERE \n    loyalty_points > 1000\n    AND lp.tier_level = 'gold'\n    AND chargeback_request IS NULL\n    AND billing_address = shipping_address\n    AND EXISTS (\n        SELECT 1\n        FROM order_items oi\n        WHERE oi.order_id = o.order_id\n            AND oi.price_per_unit > 50\n    )\n    AND c.feedback_score > 4\n    AND o.order_total > 500\n    AND o.delivery_date >= NOW() - INTERVAL '3 months';"
  },
  {
    "NL": "Get the total number of orders, total transaction amount, and average loyalty points earned per order for customers who have made a purchase in the last 30 days, have a premium account, and have a total of at least 2 wishlist items, along with the average scroll depth percentage and click count for these customers",
    "Query": "SELECT \n    COUNT(o.order\\_id) AS total\\_orders,\n    SUM(o.transaction\\_amount) AS total\\_transaction\\_amount,\n    AVG(o.loyalty\\_points) AS avg\\_loyalty\\_points\\_per\\_order,\n    AVG(w.wishlist\\_items) AS avg\\_wishlist\\_items,\n    AVG(s.scroll\\_depth\\_percentage) AS avg\\_scroll\\_depth\\_percentage,\n    AVG(s.click\\_count) AS avg\\_click\\_count\nFROM\n    orders o\nJOIN\n    customers c ON o.customer\\_id = c.customer\\_id\nJOIN\n    wishlists w ON c.customer\\_id = w.customer\\_id\nJOIN\n    scrolls s ON c.customer\\_id = s.customer\\_id\nWHERE\n    o.order\\_date >= NOW() - INTERVAL '30 days'\n    AND c.account\\_type = 'premium'\n    AND w.wishlist\\_items >="
  },
  {
    "NL": "Find the total revenue generated by each campaign along with the number of total conversions and the number of products added to wishlists during the campaign period.",
    "Query": "SELECT campaign\\_id,\n       SUM(revenue) AS total\\_revenue,\n       COUNT(conversion) AS total\\_conversions,\n       COUNT(wishlist) AS products\\_added\\_to\\_wishlists\nFROM campaign\\_data\nGROUP BY campaign\\_"
  },
  {
    "NL": "What are the total amounts of orders made by each customer who has left a review?",
    "Query": "SELECT c.customer\\_id, SUM(o.amount)\nFROM customers c\nJOIN orders o ON c.customer\\_id = o.customer\\_id\nJOIN reviews r ON c.customer\\_id = r.customer\\_id\nGROUP BY c.customer\\_"
  },
  {
    "NL": "List all products that have been added to a wishlist with a priority level of high and are currently out of stock, along with the customer's notes and the product's detailed description, considering only products that have a standard retail price less than $50 and are from a specific brand.",
    "Query": "SELECT p.product\\_id, p.name, p.description, w.notes, p.price, p.stock\nFROM products p\nJOIN wishlists w ON p.product\\_id = w.product\\_id\nWHERE w.priority = 'high' AND p.stock = 0 AND p.price < 50 AND p.brand = 'specific\\_bran"
  },
  {
    "NL": "Retrieve all reviews that have been flagged as inappropriate and the customer's first and last name.",
    "Query": "SELECT reviews.*, customers.first\\_name, customers.last\\_name\nFROM reviews\nJOIN customers ON reviews.customer\\_id = customers.id\nWHERE reviews.flagged = tr"
  },
  {
    "NL": "Retrieve the product display name and the average review star rating for all products that have received at least 5 reviews.",
    "Query": "SELECT product\\_display\\_name, AVG(review\\_star\\_rating) \nFROM products \nJOIN reviews ON products.id = reviews.product\\_id \nGROUP BY product\\_display\\_name \nHAVING COUNT(*) >="
  },
  {
    "NL": "Get the total discount amount redeemed by customers in the loyalty program.",
    "Query": "SELECT SUM(discount_amount) FROM loyalty_progr"
  },
  {
    "NL": "Find the number of reviews and ratings where the review was flagged as inappropriate.",
    "Query": "SELECT COUNT(\\*) FROM reviews WHERE is\\_flagged = tr"
  },
  {
    "NL": "Retrieve the average star rating for products that have received more than 50 helpful votes.",
    "Query": "SELECT AVG(star\\_rating) \nFROM products \nWHERE helpful\\_votes >"
  },
  {
    "NL": "For all the customers who have both placed an order and added at least one item to their wishlist, display the customer's name, order count, wishlist count, and average order total amount.",
    "Query": "SELECT c.name, COUNT(o.id) AS order\\_count, COUNT(w.id) AS wishlist\\_count, AVG(o.total) AS avg\\_order\\_total\nFROM customers c\nJOIN orders o ON c.id = o.customer\\_id\nJOIN wishlists w ON c.id = w.customer\\_id\nGROUP BY c.id, c.name\nHAVING COUNT(o.id) > 0 AND COUNT(w.id) >"
  },
  {
    "NL": "Retrieve the transaction details of all fraudulent transactions.",
    "Query": "SELECT * FROM transactions WHERE is\\_fraudulent = tr"
  },
  {
    "NL": "What is the average amount spent per order for customers with a premium account?",
    "Query": "SELECT AVG(amount) \nFROM orders \nJOIN customers ON orders.customer\\_id = customers.customer\\_id \nWHERE customers.account\\_type = 'premiu"
  },
  {
    "NL": "Find the total number of loyalty points accumulated by customers who have redeemed more than 100 loyalty points and have at least one product in their cart with a promotional discount of more than 20%.",
    "Query": "SELECT COUNT(\\*)\nFROM customers\nWHERE loyalty_points > 100 AND EXISTS (\n    SELECT \\*\n    FROM cart\n    WHERE customers.customer\\_id = cart.customer\\_id AND EXISTS (\n        SELECT \\*\n        FROM products\n        WHERE cart.product\\_id = products.product\\_id AND discount > 20\n    )"
  },
  {
    "NL": "Find all reviews with a rating of 5 and the customer has edited the review at least once.",
    "Query": "SELECT * FROM reviews \nWHERE rating = 5 \nAND edited_count >"
  },
  {
    "NL": "Retrieve the shipping details for all orders where the shipping status is 'delivered', along with the total price of items in those orders.",
    "Query": "SELECT orders.shipping_details, SUM(order\\_items.price) as total\\_price\nFROM orders\nJOIN order\\_items ON orders.id = order\\_items.order\\_id\nWHERE orders.shipping\\_status = 'delivered'\nGROUP BY orders.id, orders.shipping\\_detai"
  },
  {
    "NL": "Find the customer information and transaction details of all customers who have applied for a refund, along with the refund amount and the product they purchased, also including the shipping address and the estimated delivery date. Ensure that the customer is not a premium customer and the transaction amount is greater than 100.",
    "Query": "SELECT c.customer\\_id, c.name, c.email, t.transaction\\_id, t.product, t.amount AS transaction\\_amount, r.refund\\_amount, r.estimated\\_delivery\\_date, s.address\nFROM customers c\nJOIN transactions t ON c.customer\\_id = t.customer\\_id\nJOIN refunds r ON t.transaction\\_id = r.transaction\\_id\nJOIN shipments s ON t.transaction\\_id = s.transaction\\_id\nWHERE c.premium\\_customer = false AND t.amount > 1"
  },
  {
    "NL": "Find the total amount of transactions for customers who have placed an order with a total amount greater than 100, have a loyalty program status with a balance greater than 100, and have made a transaction in the last 30 days. Also, include the customer's name and order status in the results.",
    "Query": "SELECT c.name, o.status, SUM(t.amount)\nFROM customers c\nJOIN orders o ON c.id = o.customer\\_id\nJOIN transactions t ON o.id = t.order\\_id\nJOIN loyalty\\_program lp ON c.id = lp.customer\\_id\nWHERE t.amount > 100\nAND lp.balance > 100\nAND t.transaction\\_date >= NOW() - INTERVAL '30 days'\nGROUP BY c.name, o.stat"
  },
  {
    "NL": "Find all products that have an average customer review rating greater than or equal to 4.5, and are supplied by a supplier with an average supplier rating greater than or equal to 4.5, and have a standard retail price including tax less than or equal to $100, and are flagged as environmentally sustainable, and are featured products, and have a total number of verified reviews greater than or equal to 1000, and have a shipping weight measurement in kilograms less than or equal to 5 kilograms.",
    "Query": "SELECT * \nFROM products \nWHERE AVG(reviews.rating) >= 4.5 \nAND supplier_rating >= 4.5 \nAND retail_price * (1 + tax_rate) <= 100 \nAND environmentally_sustainable = true \nAND featured = true \nAND COUNT(reviews.verified) >= 1000 \nAND shipping_weight_kg <="
  },
  {
    "NL": "Retrieve the total transaction amount for each transaction where the transaction status is 'completed' and the fraud detection flagged is false.",
    "Query": "SELECT SUM(transaction\\_amount) \nFROM transactions \nWHERE transaction\\_status = 'completed' AND fraud\\_detection = fal"
  },
  {
    "NL": "Find the total number of products supplied by each supplier, and the average rating of each supplier, and the total number of verified reviews for each product supplied by each supplier, and the average retail price of each product supplied by each supplier, and the total number of transactions made for each product supplied by each supplier.",
    "Query": "```sql\nSELECT \n    s.supplier_id, \n    s.name,\n    COUNT(p.product_id) as total_products,\n    AVG(r.rating) as avg_rating,\n    SUM(vr.verified_reviews) as total_verified_reviews,\n    AVG(pr.retail_price) as avg_retail_price,\n    SUM(t.transaction_id) as total_transactions\nFROM \n    suppliers s\nJOIN \n    products p ON s.supplier_id = p.supplier_id\nJOIN \n    product_reviews r ON p.product_id = r.product_id\nJOIN \n    verified_reviews vr ON r.review_id = vr.review_id\nJOIN \n    product_retail_prices pr ON p.product_id = pr.product_id\nJOIN \n    transactions t ON p.product_id = t.product_id\nGROUP BY \n    s.supplier_id, s.name;"
  },
  {
    "NL": "Find the total number of premium customers who have made more than 10 orders and have a loyalty points balance greater than 500.",
    "Query": "SELECT COUNT(\\*) \nFROM customers \nWHERE customer\\_tier = 'premium' \nAND orders\\_count > 10 \nAND loyalty\\_points > 5"
  },
  {
    "NL": "Find all customers who have initiated a refund and have a transaction status of 'Completed'.",
    "Query": "SELECT * FROM customers \nWHERE customer_id IN (SELECT customer\\_id FROM refunds) \nAND transaction\\_status = 'Complete"
  },
  {
    "NL": "Find the total number of customers who have an active subscription and are over 30 years old.",
    "Query": "SELECT COUNT(\\*) FROM customers \nWHERE age > 30 AND subscription_status = 'activ"
  },
  {
    "NL": "Retrieve the average star rating of reviews for products that have received more than 50 helpful votes and were submitted by premium customers who have made more than 10 purchases, along with the customer's first name and last name, filtering out reviews that are flagged as inappropriate and sorting the results by the customer's last name in descending order.",
    "Query": "SELECT AVG(reviews.star\\_rating), customers.first\\_name, customers.last\\_name\nFROM reviews\nJOIN customers ON reviews.customer\\_id = customers.customer\\_id\nJOIN purchases ON customers.customer\\_id = purchases.customer\\_id\nWHERE reviews.helpful\\_votes > 50\nAND customers.membership = 'premium'\nAND purchases.quantity > 10\nAND reviews.flagged = FALSE\nGROUP BY customers.customer\\_id, customers.first\\_name, customers.last\\_name\nORDER BY customers.last\\_name DE"
  },
  {
    "NL": "Find the total number of orders placed by customers who are premium members and have an active subscription.",
    "Query": "SELECT COUNT(\\*) FROM Orders \nJOIN Customers ON Orders.customer\\_id = Customers.customer\\_id \nWHERE Customers.membership\\_status = 'premium' AND Customers.subscription\\_status = 'activ"
  },
  {
    "NL": "Get the details of all campaigns that have a start date later than '2022-01-01' and are of type 'email'",
    "Query": "SELECT * FROM campaigns WHERE start\\_date > '2022-01-01' AND type = 'emai"
  },
  {
    "NL": "What is the number of customers who are eligible for special promotions and have accumulated more than 1000 loyalty points, along with the total discount amount redeemed and the total number of helpful votes received by reviews submitted by these customers, grouped by the loyalty program tier level?",
    "Query": "SELECT loyalty\\_program\\_tier,\nCOUNT(customer\\_id) AS eligible\\_customers,\nSUM(discount\\_amount) AS total\\_discount\\_redeemed,\nSUM(helpful\\_votes) AS total\\_helpful\\_votes\nFROM customers\nJOIN promotions ON customers.customer\\_id = promotions.customer\\_id\nJOIN loyalty\\_points ON customers.customer\\_id = loyalty\\_points.customer\\_id\nJOIN reviews ON customers.customer\\_id = reviews.customer\\_id\nWHERE promotions.eligible = true AND loyalty\\_points.points > 1000\nGROUP BY loyalty\\_program\\_ti"
  },
  {
    "NL": "Find the number of orders shipped in the past 24 hours, grouped by shipping status.",
    "Query": "SELECT shipping\\_status, COUNT(\\*) \nFROM orders \nWHERE shipped\\_at >= NOW() - INTERVAL '24 hours' \nGROUP BY shipping\\_stat"
  },
  {
    "NL": "Find all non-premium customers who have not placed any orders this year and have a subscription, list their email, phone number, and last login date.",
    "Query": "SELECT email, phone, last\\_login\\_date\nFROM customers\nWHERE subscription = TRUE AND premium = FALSE AND NOT EXISTS (\n    SELECT 1\n    FROM orders\n    WHERE customer\\_id = customers.id AND order\\_date >= DATE\\_TRUNC('year', CURRENT\\_DATE)"
  },
  {
    "NL": "What is the average shipping cost for orders that have been shipped and have a shipping status of 'delivered'?",
    "Query": "SELECT AVG(shipping\\_cost) \nFROM orders \nWHERE shipping\\_status = 'delivere"
  },
  {
    "NL": "What are the order IDs and shipping costs for orders that have been shipped and have a shipping status of 'delivered'?",
    "Query": "SELECT order\\_id, shipping\\_cost\nFROM orders\nWHERE shipping\\_status = 'delivere"
  },
  {
    "NL": "Find the total revenue generated for each campaign along with the total shipping cost for the corresponding orders",
    "Query": "SELECT c.campaign\\_name, SUM(o.revenue) AS total\\_revenue, SUM(o.shipping\\_cost) AS total\\_shipping\\_cost\nFROM campaigns c\nJOIN orders o ON c.campaign\\_id = o.campaign\\_id\nGROUP BY c.campaign\\_na"
  },
  {
    "NL": "List all customers who have a newsletter subscription and their wishlist items.",
    "Query": "SQL Query:\n\n```sql\nSELECT c.customer_id, c.name, w.item_id, w.item_name\nFROM customers c\nJOIN newsletter_subscriptions ns ON c.customer_id = ns.customer_id\nJOIN wishlists w ON c.customer_id = w.customer_id;"
  },
  {
    "NL": "Find the total number of loyalty points for customers with free shipping eligibility and the average supplier rating of their suppliers.",
    "Query": "SELECT \n    SUM(c.loyalty_points) AS total\\_loyalty\\_points,\n    AVG(s.rating) AS avg\\_supplier\\_rating\nFROM\n    customers c\nJOIN\n    orders o ON c.customer\\_id = o.customer\\_id\nJOIN\n    suppliers s ON o.supplier\\_id = s.supplier\\_id\nWHERE\n    c.free\\_shipping\\_eligibility = TR"
  },
  {
    "NL": "Find all reviews that have a sentiment analysis score greater than or equal to 0.8, and are from customers who have made at least 5 previous purchases, and have a review approval moderation status of 'Approved', and have a review moderator note containing the word 'Excellent', and are associated with products that have a standard retail price including tax greater than $50, and are from suppliers with an average supplier rating greater than or equal to 4.5, and are flagged as environmentally sustainable, and have a total number of verified reviews greater than or equal to 500.",
    "Query": "SELECT r.*\nFROM reviews r\nJOIN customers c ON r.customer\\_id = c.customer\\_id\nJOIN products p ON r.product\\_id = p.product\\_id\nJOIN suppliers s ON p.supplier\\_id = s.supplier\\_id\nWHERE r.sentiment\\_analysis\\_score >= 0.8\nAND c.purchase\\_count >= 5\nAND r.moderation\\_status = 'Approved'\nAND r.moderator\\_note ILIKE '%Excellent%'\nAND p.retail\\_price\\_including\\_tax > 50\nAND s.average\\_rating >= 4.5\nAND r.is\\_environmentally\\_sustainable = true\nAND r.verified\\_review\\_count >= 5"
  },
  {
    "NL": "What is the average supplier rating?",
    "Query": "SELECT AVG(rating) FROM supplie"
  },
  {
    "NL": "Get the total amount of all refunds where the refund status is 'approved' and the refund method is 'credit'.",
    "Query": "SELECT SUM(amount) FROM refunds WHERE refund\\_status = 'approved' AND refund\\_method = 'credi"
  },
  {
    "NL": "What is the average revenue generated per campaign?",
    "Query": "SELECT AVG(revenue) FROM campaig"
  },
  {
    "NL": "Find all unique product identifiers where the standard retail price is greater than the promotional price, and the percentage discount is greater than 0.",
    "Query": "SELECT DISTINCT product\\_identifier\nFROM products\nWHERE standard\\_retail\\_price > promotional\\_price AND percentage\\_discount >"
  },
  {
    "NL": "List the shipping details for orders with a shipping status of 'shipped' in the last 30 days.",
    "Query": "SELECT * FROM orders\nWHERE shipping\\_status = 'shipped' AND shipped\\_date >= NOW() - INTERVAL '30 day"
  },
  {
    "NL": "Get the total discount amount redeemed and the last loyalty point update date for customers who have an accumulated loyalty points balance greater than 500 and are eligible for special promotions.",
    "Query": "SELECT SUM(discount\\_amount) AS total\\_discount, MAX(last\\_update) AS last\\_loyalty\\_point\\_update\nFROM customers\nWHERE loyalty\\_points > 500 AND is\\_eligible_for_special_promotions = TR"
  },
  {
    "NL": "Retrieve the total number of loyalty points earned by customers who have made more than 5 orders and have free shipping eligibility.",
    "Query": "SELECT COUNT(\\*) FROM customers \nJOIN orders ON customers.customer\\_id = orders.customer\\_id \nJOIN loyalty\\_program ON customers.customer\\_id = loyalty\\_program.customer\\_id \nWHERE orders.order\\_count > 5 AND loyalty\\_program.free\\_shipping = TR"
  },
  {
    "NL": "Find the total number of transactions for each customer.",
    "Query": "SELECT customer\\_id, COUNT(*) as total\\_transactions\nFROM transactions\nGROUP BY customer\\_"
  },
  {
    "NL": "Retrieve the average time spent on the events related to orders that have a payment method of 'Credit Card' and occurred in the year 2022, grouped by the event type.",
    "Query": "SELECT event\\_type, AVG(time\\_spent) \nFROM events \nJOIN orders ON events.order\\_id = orders.id \nWHERE payment\\_method = 'Credit Card' AND orders.year = 2022 \nGROUP BY event\\_ty"
  },
  {
    "NL": "Retrieve a comprehensive report for each customer, which includes the total time spent on the site, average cart value, number of unique sessions, the most common device platform, and the average review rating. Additionally, for each customer, calculate the total amount spent on orders, the average shipping fee per item, and the average tax amount per item. This report should be ordered by the total time spent in descending order.",
    "Query": "```sql\nSELECT \n    customer_id,\n    SUM(time_spent) AS total_time_spent,\n    AVG(cart_value) AS average_cart_value,\n    COUNT(DISTINCT session_id) AS number_of_unique_sessions,\n    MAX(device_platform) AS most_common_device_platform,\n    AVG(review_rating) AS average_review_rating,\n    SUM(order_amount) AS total_amount_spent,\n    AVG(shipping_fee / item_count) AS average_shipping_fee_per_item,\n    AVG(tax_amount / item_count) AS average_tax_amount_per_item\nFROM \n    customer_sessions\nJOIN \n    orders ON customer_sessions.customer_id = orders.customer_id\nJOIN \n    items ON orders.order_id = items.order_id\nGROUP BY \n    customer_id\nORDER BY \n    total_time_spent DESC;"
  },
  {
    "NL": "Find the total transaction amount and the review approval moderation status for transactions that have been flagged as fraudulent and have a review approval moderation status of 'approved'.",
    "Query": "SELECT SUM(transaction\\_amount), review\\_approval\\_moderation\\_status\nFROM transactions\nWHERE is\\_fraudulent = TRUE AND review\\_approval\\_moderation\\_status = 'approve"
  },
  {
    "NL": "Find all female customers above 40 years old with more than 1000 loyalty points.",
    "Query": "SELECT * FROM customers \nWHERE gender = 'female' \nAND age > 40 \nAND loyalty_points > 10"
  },
  {
    "NL": "Find all transactions where the customer has made a purchase using a digital wallet and the product is currently in stock, also find the quantity of the product in the inventory.",
    "Query": "SELECT t.*, i.quantity\nFROM transactions t\nJOIN inventory i ON t.product\\_id = i.product\\_id\nWHERE t.payment\\_method = 'digital wallet' AND i.quantity >"
  },
  {
    "NL": "Analyze the engagement of customers by calculating the average time spent on the website, the total number of clicks, and the number of reviews they have provided, for customers who have placed an order in the past year and have a loyalty tier level of 'Gold'. The results should be grouped by city and ordered by the number of reviews in descending order.",
    "Query": "SELECT city, AVG(time_spent) AS avg\\_time, SUM(clicks) AS total\\_clicks, COUNT(reviews) AS num\\_reviews\nFROM customers\nJOIN orders ON customers.customer\\_id = orders.customer\\_id\nWHERE orders.order\\_date >= NOW() - INTERVAL '1 year' AND customers.loyalty\\_tier = 'Gold'\nGROUP BY city\nORDER BY num\\_reviews DE"
  },
  {
    "NL": "List all columns for the orders table",
    "Query": "SELECT * FROM information\\_schema.columns WHERE table\\_name = 'order"
  },
  {
    "NL": "Find all orders where the order status is 'pending' and the shipping address city is 'New York'.",
    "Query": "SELECT * FROM orders WHERE order\\_status = 'pending' AND shipping\\_address\\_city = 'New Yor"
  },
  {
    "NL": "Get the details of all wishlist items that have been added by customers who have made at least one purchase with a total transaction amount greater than $100.",
    "Query": "Sure, here's the SQL query for your natural language query:\n```sql\nSELECT * \nFROM wishlist_items \nWHERE customer_id IN (\n    SELECT customer_id \n    FROM purchases \n    GROUP BY customer_id \n    HAVING SUM(transaction_amount) > 100\n);\n```\nThis query first selects the `customer_id`s of customers who have made purchases with a total transaction amount greater than $100. It then uses this subquery to select the details of all wishlist items that have been added by those custome"
  },
  {
    "NL": "Retrieve the total number of customers who are eligible for special promotions and have an accumulated loyalty points balance greater than 1000.",
    "Query": "SELECT COUNT(\\*) FROM customers\nWHERE is\\_eligible\\_for\\_special\\_promotions = TRUE AND loyalty\\_points\\_balance > 10"
  },
  {
    "NL": "Calculate the total quantity of inventory that is past the expiry date for all products.",
    "Query": "SELECT SUM(quantity) FROM inventory WHERE expiry_date < NOW"
  },
  {
    "NL": "Retrieve all the columns from the customerinfo table where the customer's preferred language is 'English'.",
    "Query": "SELECT * FROM customerinfo WHERE preferred\\_language = 'Englis"
  },
  {
    "NL": "Find the total amount of all orders shipped to the city of New York and their corresponding product names",
    "Query": "SELECT o.product\\_name, SUM(o.amount)\nFROM orders o\nJOIN customers c ON o.customer\\_id = c.customer\\_id\nWHERE c.city = 'New York'\nGROUP BY o.product\\_na"
  },
  {
    "NL": "Find the total number of products in each cart for users who have opened their email and have a review rating greater than 3",
    "Query": "SELECT c.cart\\_id, COUNT(p.product\\_id) as total\\_products\nFROM carts c\nJOIN cart\\_items ci ON c.cart\\_id = ci.cart\\_id\nJOIN products p ON ci.product\\_id = p.product\\_id\nJOIN users u ON c.user\\_id = u.user\\_id\nWHERE u.email_opened = true AND u.review\\_rating > 3\nGROUP BY c.cart\\_"
  },
  {
    "NL": "Get the product details and the average review rating for products that have been purchased by customers who have also opened an email.",
    "Query": "SELECT p.product\\_id, p.product\\_name, p.price, AVG(r.rating) as avg\\_rating\nFROM products p\nJOIN purchases pu ON p.product\\_id = pu.product\\_id\nJOIN customers c ON pu.customer\\_id = c.customer\\_id\nJOIN email\\_opens eo ON c.customer\\_id = eo.customer\\_id\nJOIN reviews r ON p.product\\_id = r.product\\_id\nGROUP BY p.product\\_id, p.product\\_name, p.pri"
  },
  {
    "NL": "What are the total transaction amounts for each payment method used and the corresponding total billed amounts?",
    "Query": "SELECT payment\\_method, SUM(transaction\\_amount) as total\\_transaction\\_amount, SUM(billed\\_amount) as total\\_billed\\_amount\nFROM transactions\nGROUP BY payment\\_meth"
  },
  {
    "NL": "List all customers who have a total loyalty points value greater than 1000 and are subscribed to the newsletter.",
    "Query": "SELECT * FROM customers \nWHERE loyalty_points > 1000 \nAND subscribed_to_newsletter = TR"
  },
  {
    "NL": "Find all loyalty members who have never participated in exclusive beta testing but are eligible for special promotions.",
    "Query": "SELECT * FROM loyalty\\_members\nWHERE NOT EXISTS (SELECT 1 FROM beta\\_testing WHERE loyalty\\_members.member\\_id = beta\\_testing.member\\_id)\nAND eligible\\_for\\_special\\_promotions = TR"
  },
  {
    "NL": "Retrieve a comprehensive list of products that have received reviews with a sentiment analysis score higher than 3.5, along with the average number of verified reviews and the total number of edits made to those reviews. Additionally, provide the product display name, primary material composition, and the estimated production cost per unit, considering only those products that have been reviewed more than 100 times.",
    "Query": "SELECT p.display_name, p.primary_material, p.estimated_cost, AVG(r.verified_reviews) AS avg_verified_reviews, SUM(r.edits) AS total_edits\nFROM products p\nJOIN reviews r ON p.id = r.product_id\nWHERE r.sentiment_score > 3.5 AND r.verified_reviews > 100\nGROUP BY p.id, p.display_name, p.primary_material, p.estimated_co"
  },
  {
    "NL": "Find the total number of transactions for each campaign and the total revenue generated for each campaign.",
    "Query": "SELECT campaign\\_id, COUNT(*) as total\\_transactions, SUM(revenue) as total\\_revenue\nFROM transactions\nGROUP BY campaign\\_"
  },
  {
    "NL": "Get the customer birthday special discount status and the order date for customers who have placed orders with a payment status of 'paid' and have participated in exclusive beta testing.",
    "Query": "SELECT customer\\_birthday\\_special\\_discount\\_status, order\\_date\nFROM customers\nJOIN orders ON customers.id = orders.customer\\_id\nWHERE payment\\_status = 'paid' AND participated\\_in\\_exclusive\\_beta\\_testing = tr"
  },
  {
    "NL": "Find all premium customers who have an active subscription and a wishlist with more than 1 item.",
    "Query": "SELECT * FROM customers \nWHERE is\\_premium = TRUE \nAND has\\_active\\_subscription = TRUE \nAND (SELECT COUNT(*) FROM wishlist\\_items WHERE customer\\_id = customers.id) >"
  },
  {
    "NL": "Find the total number of reviews left by customers who have a non-premium account.",
    "Query": "SELECT COUNT(\\*) FROM reviews \nJOIN users ON reviews.user\\_id = users.id \nWHERE users.account\\_type != 'premiu"
  },
  {
    "NL": "What are the total amounts and shipping fees for orders placed by customers who have made previous purchases at least five times, and what are the associated review scores of the orders, grouped by the customer's identifier and the order's delivery date?",
    "Query": "```sql\nSELECT c.customer_id, o.delivery_date, SUM(o.total_amount) AS total_amount, SUM(o.shipping_fee) AS shipping_fee, AVG(r.score) AS review_score\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN reviews r ON o.order_id = r.order_id\nWHERE c.purchase_count >= 5\nGROUP BY c.customer_id, o.delivery_date;"
  },
  {
    "NL": "Find the total number of customers who have more than 1000 accumulated loyalty points balance and are eligible for special promotions.",
    "Query": "SELECT COUNT(\\*) FROM customers\nWHERE loyalty_points > 1000 AND is\\_eligible\\_for\\_promotions = TR"
  },
  {
    "NL": "What is the total quantity of products with a fragile item indicator of true and an available stock quantity greater than 1000?",
    "Query": "SELECT SUM(available\\_stock\\_quantity) \nFROM products \nWHERE fragile\\_item\\_indicator = true AND available\\_stock\\_quantity > 10"
  },
  {
    "NL": "Get the details of all customers who have active subscription and are premium.",
    "Query": "SELECT * FROM customers \nWHERE subscription_status = 'active' AND customer_type = 'premiu"
  },
  {
    "NL": "Identify the top 5 products with the highest total refund amounts, considering only completed refund requests.",
    "Query": "Here's the SQL query for your natural language query:\n\n```sql\nSELECT product_id, SUM(refund_amount) AS total_refund_amount\nFROM refunds\nWHERE request_status = 'completed'\nGROUP BY product_id\nORDER BY total_refund_amount DESC\nLIMIT 5;"
  },
  {
    "NL": "What are the campaign names and the total amount of each order for all the orders?",
    "Query": "SELECT campaign\\_name, SUM(amount)\nFROM orders\nGROUP BY campaign\\_na"
  },
  {
    "NL": "Find the total revenue generated from campaigns that have generated more than $1000 in revenue and also list the average shipping cost for orders placed under these campaigns.",
    "Query": "SELECT \ncampaign\\_id, \nAVG(shipping\\_cost) AS avg\\_shipping\\_cost, \nSUM(revenue) AS total\\_revenue\nFROM \norders\nWHERE \nrevenue > 1000\nGROUP BY \ncampaign\\_id\nHAVING \nSUM(revenue) > 10"
  },
  {
    "NL": "Retrieve the average sentiment analysis score of reviews for products that have had a promotional discount applied and were added to the wishlist within the last 90 days. Additionally, include the total number of reviews for these products and the average esthetic rating given by customers.",
    "Query": "SELECT AVG(sentiment\\_score) AS avg\\_sentiment,\n       AVG(esthetic\\_rating) AS avg\\_esthetic\\_rating,\n       COUNT(reviews.id) AS total\\_reviews\nFROM reviews\nJOIN products ON reviews.product\\_id = products.id\nWHERE products.had\\_promotional\\_discount = true AND\n      products.added\\_to\\_wishlist\\_date >= NOW() - INTERVAL '90 days'\nGROUP BY products."
  },
  {
    "NL": "What are the product names and their corresponding prices in the wishlist where the billing address city is 'New York' in the transactions table?",
    "Query": "SELECT products.name, transactions.price\nFROM wishlist\nJOIN transactions ON wishlist.transaction\\_id = transactions.id\nJOIN products ON wishlist.product\\_id = products.id\nWHERE transactions.billing\\_address\\_city = 'New Yor"
  },
  {
    "NL": "Retrieve the average price per unit of products in orders, along with the average discount applied per order item, for those items that have a return period of more than 30 days.",
    "Query": "SELECT AVG(order\\_items.price\\_per\\_unit) AS avg\\_price, AVG(order\\_items.discount) AS avg\\_discount\nFROM order\\_items\nJOIN orders ON order\\_items.order\\_id = orders.id\nWHERE orders.return\\_period >"
  },
  {
    "NL": "Retrieve the top 5 customers based on the total amount spent on orders, along with the number of orders and the average order value, filtering for orders placed on a desktop device.",
    "Query": "SELECT customer\\_id, COUNT(order\\_id) as num\\_orders, AVG(order\\_total) as avg\\_order\\_value\nFROM orders\nWHERE device = 'desktop'\nGROUP BY customer\\_id\nORDER BY SUM(order\\_total) DESC\nLIMIT"
  },
  {
    "NL": "Retrieve the total transaction amount and final billed amount for all transactions where the transaction is marked as fraudulent and the total transaction amount is greater than 1000.",
    "Query": "SELECT SUM(total\\_transaction\\_amount) AS total\\_transaction\\_amount, SUM(final\\_billed\\_amount) AS final\\_billed\\_amount\nFROM transactions\nWHERE is\\_fraudulent = true AND total\\_transaction\\_amount > 10"
  },
  {
    "NL": "Find all order IDs and their corresponding shipping costs where the delivery date is after '2020-01-01' and the shipping status is 'delivered'.",
    "Query": "SELECT order\\_id, shipping\\_cost\nFROM orders\nWHERE delivery\\_date > '2020-01-01' AND shipping\\_status = 'delivere"
  },
  {
    "NL": "Retrieve the total number of transactions, the total transaction amount, and the average transaction amount for each supplier's transactions.",
    "Query": "SELECT supplier\\_id,\n       COUNT(*) AS total\\_transactions,\n       SUM(transaction\\_amount) AS total\\_transaction\\_amount,\n       AVG(transaction\\_amount) AS average\\_transaction\\_amount\nFROM transactions\nGROUP BY supplier\\_"
  },
  {
    "NL": "Find the average income of customers who have a wishlist and have ordered a product at least once.",
    "Query": "SELECT AVG(income)\nFROM customers\nWHERE wishlist IS NOT NULL AND orders >"
  },
  {
    "NL": "Retrieve the total quantity of each product in the inventory with a stock status of 'available' and a stock threshold greater than or equal to 10.",
    "Query": "SELECT product\\_id, SUM(quantity) as total\\_quantity\nFROM inventory\nWHERE stock\\_status = 'available' AND stock\\_threshold >= 10\nGROUP BY product\\_"
  },
  {
    "NL": "What are the total prices and product names of the order items for a specific order?",
    "Query": "SELECT SUM(price) as total\\_price, product\\_name \nFROM order\\_items \nWHERE order\\_id = [specific order id] \nGROUP BY product\\_na"
  },
  {
    "NL": "Find the total revenue generated by all campaigns and the total cost per acquisition",
    "Query": "SELECT SUM(revenue) AS total\\_revenue, AVG(cost\\_per\\_acquisition) AS avg\\_cost\\_per\\_acquisition\nFROM campaig"
  },
  {
    "NL": "Find the total cart value and the event type for each cart status where the cart status is 'active' and the event type is 'checkout'",
    "Query": "SELECT SUM(cart\\_value) AS total\\_cart\\_value, event\\_type\nFROM carts\nWHERE cart\\_status = 'active' AND event\\_type = 'checkout'\nGROUP BY event\\_ty"
  },
  {
    "NL": "List the details of all cart items that have a total price of more than $100.",
    "Query": "SELECT * FROM cart\\_items WHERE total\\_price > 1"
  },
  {
    "NL": "Show all products in the cart for the user with user id 123.",
    "Query": "SELECT * FROM cart WHERE user\\_id = 1"
  },
  {
    "NL": "For each product in the cart, list the product display name, price per unit in the cart, and the total number of units ordered, along with the customer's review sentiment score if available.",
    "Query": "SELECT p.display\\_name, c.price\\_per\\_unit, c.units\\_ordered, r.sentiment\\_score\nFROM cart c\nJOIN products p ON c.product\\_id = p.id\nLEFT JOIN reviews r ON c.product\\_id = r.product\\_id AND c.customer\\_id = r.customer\\_"
  },
  {
    "NL": "What is the total discount amount redeemed by all customers who are eligible for special promotions and have accumulated more than 1000 loyalty points?",
    "Query": "SELECT SUM(discount_amount)\nFROM customers\nWHERE is\\_eligible\\_for\\_special\\_promotions = TRUE AND loyalty\\_points > 10"
  },
  {
    "NL": "Find all the users whose cart status is not 'abandoned' and who have more than one item in their cart with the same product ID. For these users, calculate the total price of the items in their cart and the total price of the items in their wishlist, as well as the average price per unit of the items in their cart. Also, find the average price per unit of the items in their wishlist and the number of wishlist items that are currently in stock.",
    "Query": "```sql\nSELECT u.user_id, \n       u.cart_status, \n       SUM(i.item_price * i.cart_quantity) AS total_cart_price,\n       SUM(i.item_price * w.wishlist_quantity) AS total_wishlist_price,\n       AVG(i.item_price) AS avg_cart_price_per_unit,\n       AVG(w.item_price) AS avg_wishlist_price_per_unit,\n       SUM(CASE WHEN s.stock_quantity > 0 THEN 1 ELSE 0 END) AS in_stock_wishlist_items\nFROM users u\nJOIN carts c ON u.user_id = c.user_id\nJOIN items i ON c.cart_id = i.cart_id\nJOIN wishlists w ON u.user_id = w.user_id\nJOIN stocks s ON i.item_id = s.item_id\nGROUP BY u.user_id, u.cart_status\nHAVING u.cart_status != 'abandoned' AND COUNT(DISTINCT i.item_id) > 1;"
  },
  {
    "NL": "What are the total loyalty points earned by loyalty members who enrolled after '2020-01-01', and what is their average spending threshold?",
    "Query": "SELECT \n    SUM(loyalty_points) AS total\\_loyalty\\_points,\n    AVG(spending\\_threshold) AS average\\_spending\\_threshold\nFROM \n    loyalty\\_members\nWHERE \n    enrollment\\_date > '2020-01-0"
  },
  {
    "NL": "Get the details of all campaigns that have a target audience of 'young adults' and also find the names of suppliers who have supplied products in these campaigns with the quantity supplied.",
    "Query": "SELECT c.campaign\\_id, c.name, c.target\\_audience, s.supplier\\_name, p.product\\_name, p.quantity\nFROM campaigns c\nJOIN campaign\\_products cp ON c.campaign\\_id = cp.campaign\\_id\nJOIN products p ON cp.product\\_id = p.product\\_id\nJOIN suppliers s ON p.supplier\\_id = s.supplier\\_id\nWHERE c.target\\_audience = 'young adult"
  },
  {
    "NL": "What is the total reach of each campaign and the total number of reviews submitted by each customer?",
    "Query": "SELECT c.campaign\\_name, SUM(c.reach) as total\\_reach, COUNT(r.review\\_id) as total\\_reviews\nFROM campaigns c\nJOIN reviews r ON c.campaign\\_id = r.campaign\\_id\nGROUP BY c.campaign\\_na"
  },
  {
    "NL": "What are the order ids, customer ids, customer names, customer emails, customer phone numbers, order dates, total prices, discounts applied, tax amounts, shipping fees, estimated delivery dates, and cart statuses of customers who have made orders with total prices greater than 100, discounts applied greater than 10, tax amounts greater than 5, shipping fees greater than 10, and estimated delivery dates within the next 30 days, who are also eligible for special promotions, have loyalty points greater than 1000, have active subscriptions, are not premium, have a gender of 'M', an income greater than 50000, and an average spent per order greater than 100?",
    "Query": "SELECT orders.order\\_id, customers.customer\\_id, customers.customer\\_name, customers.customer\\_email, customers.customer\\_phone, orders.order\\_date, orders.total\\_price, orders.discount\\_applied, orders.tax\\_amount, orders.shipping\\_fees, orders.estimated\\_delivery\\_date, orders.cart\\_status\nFROM customers\nJOIN orders ON customers.customer\\_id = orders.customer\\_id\nWHERE orders.total\\_price > 100\nAND orders.discount\\_applied > 10\nAND orders.tax\\_amount > 5\nAND orders.shipping\\_fees > 10\nAND orders.estimated\\_delivery\\_date BETWEEN NOW() AND NOW() + INTERVAL '30 days'\nAND customers.eligible\\_for\\_special\\_promotions = true\nAND customers.loyalty\\_points > 1000\nAND customers.subscription\\_status = 'active'\nAND customers.premium\\_status = false\nAND customers.gender = 'M'\nAND customers.income > 50000\nAND (\nSELECT AVG(orders.total\\_price)\nFROM orders\nWHERE orders.customer\\_id = customers.customer\\_id\n) > 1"
  },
  {
    "NL": "Get the order id, total amount, and shipping address for orders where the order status is 'shipped' and the payment status is 'paid'.",
    "Query": "SELECT order\\_id, total\\_amount, shipping\\_address\nFROM orders\nWHERE order\\_status = 'shipped' AND payment\\_status = 'pai"
  },
  {
    "NL": "List all events where the device browser is 'Chrome' and the event type is 'purchase'.",
    "Query": "SELECT * FROM events WHERE device_browser = 'Chrome' AND event_type = 'purchas"
  },
  {
    "NL": "Get the order ID, order date, and total amount for orders where the shipping fee is greater than 10 and the order status is 'completed'.",
    "Query": "SELECT order\\_id, order\\_date, total\\_amount\nFROM orders\nWHERE shipping\\_fee > 10 AND order\\_status = 'complete"
  },
  {
    "NL": "What is the total wishlist quantity for each customer with their loyalty points and preferred language?",
    "Query": "SELECT c.customer\\_id, c.loyalty\\_points, c.preferred\\_language, SUM(w.quantity) as total\\_wishlist\\_quantity\nFROM customers c\nJOIN wishlists w ON c.customer\\_id = w.customer\\_id\nGROUP BY c.customer\\_id, c.loyalty\\_points, c.preferred\\_langua"
  },
  {
    "NL": "List all refunds that have been initiated by the customer.",
    "Query": "SELECT * FROM refunds WHERE initiated_by = 'custome"
  },
  {
    "NL": "Find the total revenue generated from orders placed in the last 30 days.",
    "Query": "SELECT SUM(total) FROM orders WHERE order\\_date >= NOW() - INTERVAL '30 day"
  },
  {
    "NL": "What is the total price of all order items in the order_items table?",
    "Query": "SELECT SUM(price) FROM order\\_ite"
  },
  {
    "NL": "Retrieve the average total amount spent on orders for each campaign type, along with the campaign name, and sort by average total amount in descending order.",
    "Query": "SELECT campaign\\_name, AVG(total\\_amount) AS avg\\_total\\_amount\nFROM orders\nGROUP BY campaign\\_name\nORDER BY avg\\_total\\_amount DE"
  },
  {
    "NL": "Get the transaction details of customers who have earned more than 100 bonus loyalty points last month.",
    "Query": "SELECT * FROM transactions\nWHERE customer\\_id IN (\n    SELECT customer\\_id FROM loyalty\\_points\n    WHERE bonus\\_points > 100 AND transaction\\_date BETWEEN DATE\\_TRUNC('month', NOW() - INTERVAL '1 month') AND DATE\\_TRUNC('month', NOW())"
  },
  {
    "NL": "Find the shipping carrier for the order with the highest shipping cost, along with the product name and total price for each order item in that order, and also include the customer notes and refund status for any refunds or returns related to those order items.",
    "Query": "SELECT sc.carrier, oi.product\\_name, oi.total\\_price, oi.order\\_id, oi.item\\_id, oi.notes, r.refund\\_status\nFROM order\\_items oi\nJOIN orders o ON oi.order\\_id = o.id\nJOIN shipping sc ON o.shipping\\_id = sc.id\nLEFT JOIN refunds r ON oi.item\\_id = r.item\\_id\nWHERE o.id = (SELECT o2.id FROM orders o2 JOIN order\\_items oi2 ON o2.id = oi2.order\\_id GROUP BY o2.id ORDER BY SUM(oi2.total\\_price) DESC LIMIT"
  },
  {
    "NL": "Find all customers who have made a purchase in the last 30 days, have a premium account, and have spent an average of more than $50 per order. Also, include details of their most recent event interaction, including the type of event, the device used, and the location of the event.",
    "Query": "SELECT c.customer\\_id, c.account\\_type, AVG(o.total\\_amount) as avg\\_order\\_amount,\ne.event\\_type, e.device, e.location\nFROM customers c\nJOIN orders o ON c.customer\\_id = o.customer\\_id\nJOIN event\\_interactions e ON o.order\\_id = e.order\\_id\nWHERE o.order\\_date >= NOW() - INTERVAL '30 days'\nAND c.account\\_type = 'premium'\nGROUP BY c.customer\\_id, c.account\\_type, e.event\\_type, e.device, e.location\nORDER BY o.order\\_date DESC\nLIMIT"
  },
  {
    "NL": "What is the average total price of all carts?",
    "Query": "SELECT AVG(total\\_price) FROM car"
  },
  {
    "NL": "What is the total price of the order items where the item status is 'delivered' and the return period is greater than 30 days?",
    "Query": "SELECT SUM(price) \nFROM order\\_items \nWHERE item\\_status = 'delivered' AND return\\_period >"
  },
  {
    "NL": "Find the average supplier rating and the supplier's country of operation for suppliers who have supplied more than 1000 products",
    "Query": "SELECT AVG(rating), country FROM suppliers \nWHERE quantity_supplied > 1000 \nGROUP BY count"
  },
  {
    "NL": "Get the names and email addresses of all customers who have placed more than one order, along with the shipping address and carrier for their most recent order",
    "Query": "SQL query:\n```sql\nSELECT c.name, c.email, o.shipping_address, o.carrier\nFROM customers c\nJOIN (\n    SELECT customer_id, shipping_address, carrier, order_date\n    FROM orders\n    WHERE (customer_id, order_date) IN (\n        SELECT customer_id, MAX(order_date)\n        FROM orders\n        GROUP BY customer_id\n        HAVING COUNT(*) > 1\n    )\n) o ON c.id = o.customer_id;"
  },
  {
    "NL": "Retrieve the average review rating for each product, including only those with more than 10 reviews.",
    "Query": "SELECT product\\_id, AVG(review\\_rating) \nFROM reviews \nGROUP BY product\\_id \nHAVING COUNT(*) >"
  },
  {
    "NL": "List the review unique identifier, review submission date, and submitted review star rating for reviews that have more than 5 helpful votes and are verified.",
    "Query": "SELECT review\\_id, review\\_submit\\_date, review\\_star\\_rating\nFROM reviews\nWHERE review\\_helpful\\_votes > 5 AND review\\_verified = tr"
  },
  {
    "NL": "Get the total amount of refund made by each person with the corresponding wishlist status.",
    "Query": "SELECT person, SUM(refund\\_amount) as total\\_refund, wishlist\\_status\nFROM refunds\nGROUP BY person, wishlist\\_stat"
  },
  {
    "NL": "Retrieve the average final billed amount for transactions that are not fraudulent.",
    "Query": "SELECT AVG(final\\_billed\\_amount) \nFROM transactions \nWHERE is\\_fraudulent = fal"
  },
  {
    "NL": "Retrieve the names and email addresses of customers whose loyalty membership will expire within the next 30 days and who have not made any loyalty point redemptions in the last 6 months.",
    "Query": "SELECT name, email\nFROM customers\nWHERE DATE(loyalty_expiration) BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days'\nAND loyalty_point_last_redemption IS NULL\nOR loyalty_point_last_redemption < CURRENT_DATE - INTERVAL '6 month"
  },
  {
    "NL": "Get the total amount spent by each customer in the transactions_and_payments table, grouping by customer reference id.",
    "Query": "SELECT customer\\_reference\\_id, SUM(amount) as total\\_amount\nFROM transactions\\_and\\_payments\nGROUP BY customer\\_reference\\_"
  },
  {
    "NL": "Get the official business name of each supplier, the average rating of each supplier, and the number of products supplied by each supplier for suppliers that have products which were ordered by customers who have opened an email, sorted by the total number of products supplied in descending order.",
    "Query": "SELECT s.businessname, AVG(r.rating) as avg\\_rating, COUNT(p.id) as num\\_products\nFROM suppliers s\nJOIN products p ON s.id = p.supplier\\_id\nJOIN orders o ON p.id = o.product\\_id\nJOIN customers c ON o.customer\\_id = c.id\nJOIN emails e ON c.id = e.customer\\_id\nWHERE e.opened = true\nGROUP BY s.id\nORDER BY num\\_products DE"
  },
  {
    "NL": "Find the total amount spent in transaction currency code EUR and the total number of transactions for the customers who have ordered more than 5 times, and calculate the average amount spent for each order. Also, get the total number of transactions for each customer and the average amount spent for each order. Additionally, get the details of the orders that were refunded and the reason for the refund, along with the details of the customers who have ordered the most, including the total amount spent and the average amount spent for each order.",
    "Query": "WITH customer\\_orders AS (\nSELECT customer\\_id, COUNT(\\*) as total\\_orders\nFROM orders\nGROUP BY customer\\_id\nHAVING total\\_orders > 5\n),\ncustomer\\_spending AS (\nSELECT customer\\_id, SUM(amount) as total\\_spent, AVG(amount) as avg\\_spent\\_per\\_order\nFROM orders\nJOIN customer\\_orders\nON orders.customer\\_id = customer\\_orders.customer\\_id\nGROUP BY customer\\_id\n),\nrefunded\\_orders AS (\nSELECT orders.customer\\_id, reason\nFROM orders\nJOIN refunds\nON orders.id = refunds.order\\_id\nWHERE refunds.refund\\_status = 'Refunded'\n),\ntop\\_customers AS (\nSELECT customer\\_id, total\\_spent, avg\\_spent\\_per\\_order\nFROM customer\\_spending\nORDER BY total\\_spent DESC\nLIMIT 10\n)\nSELECT\nSUM(CASE WHEN transaction\\_currency = 'EUR' THEN amount ELSE 0 END) as total\\_eur\\_spent,\nCOUNT(\\*) as total\\_transactions,\nAVG(amount) as avg\\_order\\_amount,\ntotal\\_spent, avg\\_spent\\_per\\_order\nFROM orders\nJOIN customer\\_orders\nON orders.customer\\_id = customer\\_orders.customer\\_id\nJOIN customer\\_spending\nON orders.customer\\_id = customer\\_spending.customer\\_id\nLEFT JOIN refunded\\_orders\nON orders.customer\\_id = refunded\\_orders.customer\\_id\nGROUP BY customer\\_id, total\\_spent, avg\\_spent\\_per\\_order\nUNION ALL\nSELECT NULL, NULL, NULL, NULL, NULL\nFROM top\\_custome"
  },
  {
    "NL": "Find the average standard retail price including tax for products from suppliers in the UK, who have at least 100 products supplied, and who have an average supplier rating of at least 4.0. Also, find the total number of such suppliers.",
    "Query": "SELECT AVG(pr.standard\\_retail\\_price * (1 + s.tax\\_rate)) AS avg\\_price,\n       COUNT(DISTINCT s.supplier\\_id) AS num\\_suppliers\nFROM suppliers s\nJOIN products p ON s.supplier\\_id = p.supplier\\_id\nJOIN product\\_ratings pr ON p.product\\_id = pr.product\\_id\nWHERE s.country = 'UK'\nGROUP BY s.supplier\\_id\nHAVING COUNT(DISTINCT p.product\\_id) >= 100 AND AVG(pr.rating) >= 4"
  },
  {
    "NL": "Find the total transaction amount for each customer who has made at least one transaction using a digital wallet.",
    "Query": "SELECT customer\\_id, SUM(transaction\\_amount)\nFROM transactions\nWHERE payment\\_method = 'digital wallet'\nGROUP BY customer\\_id\nHAVING COUNT(*) >="
  },
  {
    "NL": "Find the total amount spent and average supplier rating for each order with its corresponding supplier information.",
    "Query": "SELECT o.order\\_id, \n       SUM(ol.quantity \\* p.price) AS total\\_amount, \n       AVG(s.rating) AS avg\\_rating, \n       s.supplier\\_name, \n       s.contact\\_name, \n       s.country\nFROM Orders o\nJOIN Order\\_Details ol ON o.order\\_id = ol.order\\_id\nJOIN Products p ON ol.product\\_id = p.product\\_id\nJOIN Suppliers s ON p.supplier\\_id = s.supplier\\_id\nGROUP BY o.order\\_id, s.supplier\\_name, s.contact\\_name, s.count"
  },
  {
    "NL": "List all carts along with the product quantity and total discounted price for each cart where the cart was added more than 30 days ago.",
    "Query": "SELECT c.cart\\_id, p.quantity, p.total\\_discounted\\_price\nFROM carts c\nJOIN cart\\_products p ON c.cart\\_id = p.cart\\_id\nWHERE c.added\\_date < NOW() - INTERVAL '30 day"
  },
  {
    "NL": "What is the total amount spent on all campaigns?",
    "Query": "SELECT SUM(amount) FROM campaig"
  },
  {
    "NL": "Find the total number of orders and total amount spent for each month in 2022.",
    "Query": "SELECT EXTRACT(MONTH FROM order\\_date) AS month,\n       COUNT(*) AS total\\_orders,\n       SUM(amount) AS total\\_amount\nFROM orders\nWHERE EXTRACT(YEAR FROM order\\_date) = 2022\nGROUP BY month\nORDER BY mon"
  },
  {
    "NL": "Find the total number of reviews and the average review sentiment score for each product, ordered by the total number of reviews in descending order.",
    "Query": "```sql\nSELECT product_id, COUNT(*) AS total_reviews, AVG(sentiment_score) AS average_sentiment_score\nFROM reviews\nGROUP BY product_id\nORDER BY total_reviews DESC;"
  },
  {
    "NL": "Calculate the average total amount of orders placed within the campaigns that generated more than $500 in revenue, along with the campaign name.",
    "Query": "SELECT campaign\\_name, AVG(total\\_amount)\nFROM orders\nWHERE campaign\\_revenue > 500\nGROUP BY campaign\\_na"
  },
  {
    "NL": "Find the total shipping cost for all orders shipped to the city of New York.",
    "Query": "SELECT SUM(shipping\\_cost) \nFROM orders \nWHERE city = 'New Yor"
  },
  {
    "NL": "Find the total number of wishlist records for each user, along with the total number of products supplied by each supplier, and also find the total reach and revenue generated for each campaign that has a higher budget than the average budget of all campaigns, and also find the shipping cost and shipping status for each shipping record where the shipping address is in the same city as the registered business address of the supplier with the highest average supplier rating, and also find the average supplier rating and official business name for each supplier who operates in the same country as the supplier with the highest average supplier rating.",
    "Query": "```sql\nSELECT \n    u.user_id, \n    COUNT(w.wishlist_id) AS total_wishlist_records,\n    s.supplier_id, \n    COUNT(p.product_id) AS total_products_supplied,\n    SUM(c.reach) + SUM(c.revenue) AS total_reach_and_revenue,\n    s2.shipping_cost, \n    s2.shipping_status,\n    AVG(s.supplier_rating) AS avg_supplier_rating,\n    s2.official_business_name\nFROM \n    users u\nLEFT JOIN \n    wishlists w ON u.user_id = w.user_id\nLEFT JOIN \n    suppliers s ON u.country = s.country\nLEFT JOIN \n    products p ON s.supplier_id = p.supplier_id\nLEFT JOIN \n    campaigns c ON s.supplier_id = c.supplier_id\nLEFT JOIN \n    shippings s2 ON w.shipping_id = s2.shipping_id\nWHERE \n    c.budget > (SELECT AVG(budget) FROM campaigns)\n    AND s2.shipping_city = (SELECT s3.business_city \n                            FROM suppliers s3 \n                            WHERE s3.supplier_id = (SELECT s4.supplier_id \n                                                 FROM suppliers s4 \n                                                 GROUP BY s4.country \n                                                 ORDER BY AVG(s4.supplier_rating) DESC \n                                                 LIMIT 1))\nGROUP BY \n    u.user_id, s.supplier_id, s2.shipping_cost, s2.shipping_status, s2.official_business_name;"
  },
  {
    "NL": "Provide the loyalty tier level and preferred language of customers who have purchased products from the wishlist with a total discount amount redeemed of more than $10.",
    "Query": "SELECT loyalty\\_tier, preferred\\_language\nFROM customers\nWHERE customer\\_id IN (\n    SELECT customer\\_id\n    FROM wishlist\\_purchases\n    WHERE total\\_discount\\_redeemed > 1"
  },
  {
    "NL": "List all the order items that are returnable and have a quantity greater than 1, along with the product name and the order id.",
    "Query": "SELECT order\\_items.order\\_id, order\\_items.product\\_id, products.product\\_name, order\\_items.quantity\nFROM order\\_items\nJOIN products ON order\\_items.product\\_id = products.product\\_id\nWHERE order\\_items.returnable = TRUE AND order\\_items.quantity >"
  },
  {
    "NL": "Find the average order value and total orders for customers who have placed at least one order in the last 30 days, and have a loyalty program status with a balance greater than 100. Also, include the customer's name and occupation in the results.",
    "Query": "SELECT AVG(order\\_value) AS average\\_order\\_value, COUNT(*) AS total\\_orders, name, occupation\nFROM orders\nJOIN customers ON orders.customer\\_id = customers.id\nWHERE order\\_date >= NOW() - INTERVAL '30 days'\nAND loyalty\\_program\\_balance > 1"
  },
  {
    "NL": "Find the customer's name and total loyalty points earned from all transactions for customers who have more than 100 loyalty points.",
    "Query": "SELECT customer\\_name, SUM(loyalty\\_points) as total\\_loyalty\\_points\nFROM transactions\nGROUP BY customer\\_name\nHAVING total\\_loyalty\\_points > 1"
  },
  {
    "NL": "Find the total number of loyalty points for customers who have participated in exclusive beta testing and have a loyalty program tier level of 'Platinum'.",
    "Query": "SELECT SUM(loyalty_points)\nFROM customers\nWHERE exclusive_beta_tester = TRUE AND loyalty_program_tier = 'Platinu"
  },
  {
    "NL": "List all customers who have made more than 10 orders with their email addresses and total orders count.",
    "Query": "SELECT customer\\_email, COUNT(*) as total\\_orders \nFROM orders \nGROUP BY customer\\_email \nHAVING total\\_orders >"
  },
  {
    "NL": "Find the total number of verified reviews written by premium customers who have made more than 5 purchases and have an account balance greater than $500.",
    "Query": "SELECT COUNT(\\*)\nFROM reviews\nJOIN customers ON reviews.customer\\_id = customers.customer\\_id\nWHERE customers.is\\_premium = TRUE AND customers.purchase\\_count > 5 AND customers.account\\_balance > 500 AND reviews.is\\_verified = TR"
  },
  {
    "NL": "Get the names of the campaigns with a budget greater than $10,000, along with the names of the suppliers who supply products with a quantity greater than 50 and have an average rating greater than 3, and the total revenue generated by these campaigns.",
    "Query": "SELECT c.name AS campaign\\_name,\n       s.name AS supplier\\_name,\n       AVG(r.rating) AS average\\_rating,\n       SUM(o.quantity \\* p.price) AS total\\_revenue\nFROM campaigns c\nJOIN orders o ON c.id = o.campaign\\_id\nJOIN products p ON o.product\\_id = p.id\nJOIN suppliers s ON p.supplier\\_id = s.id\nJOIN ratings r ON p.id = r.product\\_id\nWHERE c.budget > 10000\nAND o.quantity > 50\nAND r.rating > 3\nGROUP BY c.name, s.name, r.product\\_"
  },
  {
    "NL": "Get the names of the suppliers who supply products with a quantity greater than 100 and have an average rating greater than 4, along with the product names and their current stock status.",
    "Query": "SELECT s.supplier\\_name, p.product\\_name, p.current\\_stock\nFROM suppliers s\nJOIN products p ON s.supplier\\_id = p.supplier\\_id\nWHERE p.quantity > 100 AND s.average\\_rating >"
  },
  {
    "NL": "Find the loyalty program tier level and the total number of verified reviews for products purchased by customers who have a loyalty membership unique identifier greater than 1000 and have made a transaction with a total transaction amount greater than 500.",
    "Query": "SELECT loyalty\\_program\\_tier, COUNT(\\*)\nFROM purchases\nWHERE loyalty\\_membership\\_id > 1000 AND total\\_transaction\\_amount > 500\nGROUP BY loyalty\\_program\\_ti"
  },
  {
    "NL": "Get the order status and total amount for all orders with shipping address in California.",
    "Query": "SELECT order\\_status, SUM(total\\_amount)\nFROM orders\nWHERE shipping\\_address\\_state = 'California'\nGROUP BY order\\_stat"
  },
  {
    "NL": "Fetch all items in the wishlist for the user with user id 123.",
    "Query": "SELECT * FROM wishlist WHERE user\\_id = 1"
  },
  {
    "NL": "What are the top 5 campaigns by revenue generated?",
    "Query": "```sql\nSELECT campaign_name, SUM(revenue) AS total_revenue\nFROM campaigns\nGROUP BY campaign_name\nORDER BY total_revenue DESC\nLIMIT 5;"
  },
  {
    "NL": "Get the total number of products, along with their names, and the quantity in stock for products with a stock status of 'in stock'.",
    "Query": "SELECT product\\_name, quantity\\_in\\_stock, COUNT(\\*) \nFROM products \nWHERE stock\\_status = 'in stock' \nGROUP BY product\\_name, quantity\\_in\\_sto"
  },
  {
    "NL": "What is the total number of helpful votes received by each product and the total price of each order item for the product?",
    "Query": "SELECT p.product\\_id, SUM(oi.helpful\\_votes) AS total\\_helpful\\_votes, SUM(oi.price) AS total\\_order\\_item\\_price\nFROM products p\nJOIN order\\_items oi ON p.product\\_id = oi.product\\_id\nGROUP BY p.product\\_"
  },
  {
    "NL": "Get the customer ID, first name, and last name of customers who have initiated a refund and the refund status is 'pending'.",
    "Query": "SELECT customer\\_id, first\\_name, last\\_name\nFROM customers\nWHERE refund\\_status = 'pending' AND initiated\\_refund = tr"
  },
  {
    "NL": "Get the list of customers who have earned the most loyalty points in the last year, along with their total spending, average order value, and the number of orders they have placed, considering only customers who have made at least 5 purchases and have a loyalty tier level of 'Gold' or higher.",
    "Query": "SELECT c.customer\\_id, c.name, SUM(o.total) as total\\_spending, AVG(o.total/o.quantity) as avg\\_order\\_value, COUNT(o.order\\_id) as num\\_orders\nFROM customers c\nJOIN orders o ON c.customer\\_id = o.customer\\_id\nJOIN loyalty\\_tiers lt ON c.loyalty\\_tier\\_id = lt.tier\\_id\nWHERE o.order\\_date >= NOW() - INTERVAL '1 year'\nAND c.num\\_purchases >= 5\nAND lt.tier\\_level IN ('Gold', 'Platinum', 'Diamond')\nGROUP BY c.customer\\_id, c.name\nORDER BY total\\_spending DE"
  },
  {
    "NL": "Find the number of orders that have been cancelled or returned, along with the total amount of discounts applied to these orders, and the average review rating for these orders. Include only orders made by customers who have also completed a survey. Group the results by the customer ID.",
    "Query": "SELECT customer\\_id, COUNT(\\*) as num\\_orders, SUM(discount\\_amount) as total\\_discounts, AVG(review\\_rating) as avg\\_rating\nFROM orders\nJOIN customers ON orders.customer\\_id = customers.customer\\_id\nJOIN surveys ON customers.customer\\_id = surveys.customer\\_id\nWHERE orders.order\\_status IN ('cancelled', 'returned')\nGROUP BY customer\\_"
  },
  {
    "NL": "Retrieve detailed product information for all items that have been part of orders shipped after January 1, 2023, with a promotional discount greater than 20%, and which have a shipping status indicating they are delivered, grouping the results by product category and listing the count of such products in each category.",
    "Query": "```sql\nSELECT p.category, COUNT(p.product_id)\nFROM products p\nJOIN order_items oi ON p.product_id = oi.product_id\nJOIN orders o ON oi.order_id = o.order_id\nJOIN shipments s ON o.order_id = s.order_id\nWHERE s.shipping_status = 'Delivered' AND o.shipped_date > '2023-01-01' AND oi.discount > 20\nGROUP BY p.category;"
  },
  {
    "NL": "Find the average refund amount for all orders that have been fully refunded and have a status of 'approved' in the refunds_returns table.",
    "Query": "SELECT AVG(refund_amount) \nFROM refunds\\_returns \nWHERE refund\\_status = 'fully refunded' AND order\\_status = 'approve"
  },
  {
    "NL": "What are the order ids of the orders where the tax amount is more than 100 and the item status is delivered in the order items",
    "Query": "SELECT oi.order\\_id\nFROM order\\_items oi\nJOIN orders o ON oi.order\\_id = o.id\nWHERE oi.tax\\_amount > 100 AND oi.item\\_status = 'delivere"
  },
  {
    "NL": "What is the total discount amount redeemed by customers who have a lifetime loyalty points earned greater than 1000 and have an anniversary reward voucher status of True?",
    "Query": "SELECT SUM(discount_amount)\nFROM customers\nWHERE lifetime_loyalty_points > 1000 AND anniversary_reward_voucher = Tr"
  },
  {
    "NL": "What is the name and phone number of each customer who has placed an order with a total amount greater than 100, along with the order date and total amount?",
    "Query": "SELECT c.name, c.phone, o.order\\_date, o.total\\_amount\nFROM customers c\nJOIN orders o ON c.customer\\_id = o.customer\\_id\nWHERE o.total\\_amount > 1"
  },
  {
    "NL": "Get the list of customer names, loyalty program tier levels, and total amount spent by customers who have participated in exclusive beta testing and have made orders with a total amount greater than 100",
    "Query": "SELECT customer\\_name, loyalty\\_program\\_tier, SUM(order\\_amount)\nFROM customers\nJOIN orders ON customers.customer\\_id = orders.customer\\_id\nWHERE participated\\_in\\_beta\\_testing = TRUE\nGROUP BY customer\\_name, loyalty\\_program\\_tier\nHAVING SUM(order\\_amount) > 1"
  },
  {
    "NL": "List the product identifiers and review submission dates of reviews with more than 10 helpful votes.",
    "Query": "SELECT product\\_id, review\\_submit\\_date \nFROM reviews \nWHERE helpful\\_votes >"
  },
  {
    "NL": "What are the total impressions and clicks for each campaign name where the campaign has a start date after '2020-01-01' and there is at least one order item with a matching product id in the inventory table?",
    "Query": "SELECT campaign\\_name, SUM(impressions) as total\\_impressions, SUM(clicks) as total\\_clicks\nFROM campaigns\nWHERE start\\_date > '2020-01-01'\nAND campaign\\_name IN (\n    SELECT campaign\\_name\n    FROM (\n        SELECT campaign\\_name, order\\_item.product\\_id\n        FROM orders\n        JOIN order\\_items ON orders.id = order\\_items.order\\_id\n    ) subquery\n    JOIN inventory ON subquery.product\\_id = inventory.id\n)\nGROUP BY campaign\\_na"
  },
  {
    "NL": "Get the first name and last name of customers who have at least one item in their wishlist",
    "Query": "SELECT first\\_name, last\\_name \nFROM customers \nWHERE EXISTS (SELECT 1 FROM wishlist WHERE customers.customer\\_id = wishlist.customer\\_i"
  },
  {
    "NL": "What is the average amount spent per order by customers who have more than 100 loyalty points?",
    "Query": "SELECT AVG(amount) \nFROM orders \nJOIN customers ON orders.customer\\_id = customers.customer\\_id \nWHERE customers.loyalty\\_points > 1"
  },
  {
    "NL": "List all reviews where the review's star rating is above 4 and the review is flagged as inappropriate, showing the review text, product identifier, and customer identifier.",
    "Query": "SELECT review\\_text, product\\_id, customer\\_id\nFROM reviews\nWHERE star\\_rating > 4 AND is\\_flagged = tr"
  },
  {
    "NL": "Select all shipping information for orders shipped in the last 30 days.",
    "Query": "SELECT * FROM orders \nWHERE shipped\\_at >= NOW() - INTERVAL '30 day"
  },
  {
    "NL": "Find all transactions made by customers who have purchased a product that is currently in stock and has a low inventory turnover rate, and also show the corresponding shipping details for those transactions, including the estimated delivery date and shipping cost.",
    "Query": "SELECT t.*, s.estimated\\_delivery\\_date, s.shipping\\_cost\nFROM transactions t\nJOIN order\\_details od ON t.id = od.transaction\\_id\nJOIN products p ON od.product\\_id = p.id\nJOIN shipments s ON t.id = s.transaction\\_id\nWHERE p.quantity > 0 AND p.inventory\\_turnover\\_rate < (\nSELECT AVG(inventory\\_turnover\\_rate) FROM products"
  },
  {
    "NL": "Which events have been triggered by customers who have placed an order with a total amount greater than $100 and what is the average time spent by these customers during the events?",
    "Query": "SELECT e.event\\_name, AVG(e.duration)\nFROM events e\nJOIN orders o ON e.customer\\_id = o.customer\\_id\nWHERE o.total\\_amount > 100\nGROUP BY e.event\\_na"
  },
  {
    "NL": "Find the average conversion rate and ROI of all campaigns that had a positive review sentiment score (greater than 0.5) for at least one of their associated products. Also, include the campaign name and status in the results.",
    "Query": "SELECT campaign\\_name, campaign\\_status, AVG(conversion\\_rate) AS avg\\_conversion\\_rate, AVG(roi) AS avg\\_roi\nFROM campaigns\nJOIN products ON campaigns.id = products.campaign\\_id\nJOIN reviews ON products.id = reviews.product\\_id\nWHERE reviews.sentiment\\_score > 0.5\nGROUP BY campaign\\_name, campaign\\_stat"
  },
  {
    "NL": "Find the total revenue generated by transactions for premium customers between January 1, 2023, and December 31, 2023.",
    "Query": "SELECT SUM(transaction_revenue)\nFROM transactions\nWHERE customer_type = 'premium' AND transaction_date BETWEEN '2023-01-01' AND '2023-12-3"
  },
  {
    "NL": "What is the total revenue generated across all campaigns?",
    "Query": "SELECT SUM(revenue) FROM campaig"
  },
  {
    "NL": "Find all the orders whose shipment status is not shipped and their respective customers' total wishlist value exceeds 1000, for each customer display their name, order id, order date, and total wishlist value.",
    "Query": "SELECT c.customer\\_name, o.order\\_id, o.order\\_date, SUM(w.wishlist\\_value) as total\\_wishlist\\_value\nFROM customers c\nJOIN orders o ON c.customer\\_id = o.customer\\_id\nJOIN wishlists w ON c.customer\\_id = w.customer\\_id\nWHERE o.shipment\\_status != 'shipped' AND SUM(w.wishlist\\_value) > 1000\nGROUP BY c.customer\\_name, o.order\\_id, o.order\\_da"
  },
  {
    "NL": "Get the total number of orders and total spent for customers who have a newsletter subscription",
    "Query": "SELECT COUNT(o.order\\_id) AS total\\_orders, SUM(oi.price \\* oi.quantity) AS total\\_spent\nFROM orders o\nJOIN customers c ON o.customer\\_id = c.customer\\_id\nJOIN order\\_items oi ON o.order\\_id = oi.order\\_id\nJOIN newsletter\\_subscriptions ns ON c.customer\\_id = ns.customer\\_"
  },
  {
    "NL": "Get the total number of orders for customers who have more than 100 loyalty points.",
    "Query": "SELECT COUNT(\\*) FROM orders \nWHERE customer\\_id IN (\n    SELECT customer\\_id FROM loyalty\\_points \n    WHERE points > 10"
  },
  {
    "NL": "Find the total accumulated loyalty points for customers who have participated in exclusive beta testing and have ordered products with a promotional discount greater than 10%.",
    "Query": "SELECT SUM(loyalty_points)\nFROM customers\nJOIN orders ON customers.customer\\_id = orders.customer\\_id\nWHERE customers.beta\\_tester = true AND orders.discount >"
  },
  {
    "NL": "What are the names of all the products that have a standard retail price greater than $100?",
    "Query": "SELECT name \nFROM products \nWHERE standard\\_retail\\_price > 1"
  },
  {
    "NL": "Find the total number of wishlist items for all customers who have  purchased a product with the category 'Fashion', along with the number of order items for each customer.",
    "Query": "SELECT c.customer\\_id, COUNT(w.item\\_id) AS wishlist\\_items, COUNT(oi.order\\_item\\_id) AS order\\_items\nFROM customers c\nJOIN orders o ON c.customer\\_id = o.customer\\_id\nJOIN order\\_items oi ON o.order\\_id = oi.order\\_id\nJOIN products p ON oi.product\\_id = p.product\\_id\nJOIN wishlists w ON c.customer\\_id = w.customer\\_id\nWHERE p.category = 'Fashion'\nGROUP BY c.customer\\_"
  },
  {
    "NL": "Find all products that have a higher standard retail price and are also perishable, along with their corresponding inventory quantities and last restock dates.",
    "Query": "SELECT p.product\\_id, p.product\\_name, p.standard\\_retail\\_price, i.inventory\\_quantity, i.last\\_restock\\_date\nFROM products p\nJOIN inventory i ON p.product\\_id = i.product\\_id\nWHERE p.standard\\_retail\\_price > (SELECT AVG(standard\\_retail\\_price) FROM products) AND p.perishable = 'tru"
  },
  {
    "NL": "Find the average star rating of reviews for each customer who has submitted more than 5 reviews.",
    "Query": "SELECT customer\\_id, AVG(star\\_rating)\nFROM reviews\nGROUP BY customer\\_id\nHAVING COUNT(*) >"
  },
  {
    "NL": "Find all reviews with a rating of 5 and a verification status of true, along with the corresponding product identifier and review submission date.",
    "Query": "SELECT product\\_id, review\\_submission\\_date, rating, verification\\_status \nFROM reviews \nWHERE rating = 5 AND verification\\_status = tr"
  },
  {
    "NL": "Find the total amount of all orders where the order status is 'delivered' and the customer has clicked on a push notification.",
    "Query": "SELECT SUM(amount)\nFROM orders\nWHERE order\\_status = 'delivered' AND customer\\_clicked\\_notification = TR"
  },
  {
    "NL": "What is the email address and preferred payment method of each customer who has placed an order with a payment status of 'paid'?",
    "Query": "SELECT email, preferred\\_payment\\_method\nFROM customers\nJOIN orders ON customers.customer\\_id = orders.customer\\_id\nWHERE orders.payment\\_status = 'pai"
  },
  {
    "NL": "Retrieve the list of products that have been added to a user's wishlist more than 5 times and have a low stock status, including the product's name, the supplier's business name, and the last updated stock date.",
    "Query": "SELECT p.name, s.business_name, p.last_updated_stock\nFROM products p\nJOIN wishlists w ON p.id = w.product_id\nJOIN suppliers s ON p.supplier_id = s.id\nGROUP BY p.id, s.business_name, p.last_updated_stock\nHAVING COUNT(w.product_id) > 5 AND p.stock <"
  },
  {
    "NL": "What is the product name and the actual_spent of the campaigns for products with total_reach greater than 100?",
    "Query": "SELECT product\\_name, actual\\_spent \nFROM campaigns \nWHERE total\\_reach > 1"
  },
  {
    "NL": "List all suppliers who have supplied more than 500 products and have an average supplier rating greater than 4.5.",
    "Query": "SELECT * FROM suppliers\nWHERE total_products > 500 AND AVG(rating) > 4"
  },
  {
    "NL": "What are the business names of suppliers from the USA?",
    "Query": "SELECT businessname \nFROM suppliers \nWHERE country = 'US"
  },
  {
    "NL": "Find all customers who are eligible for special promotions and have accumulated more than 1000 loyalty points, along with their first and last names and email addresses.",
    "Query": "SELECT first\\_name, last\\_name, email\nFROM customers\nWHERE is\\_eligible_for_special_promotions = TRUE AND loyalty\\_points > 10"
  },
  {
    "NL": "Find the average quantity and total price of products in the cart for each product where the cart status is 'Active', and the recommended products are not null, and the wishlist flag is true, and the product id is in the wishlist. Group the result by product id and calculate the standard deviation of the total price for each group.",
    "Query": "SELECT \n    product\\_id, \n    AVG(quantity) AS avg\\_quantity, \n    SUM(price * quantity) AS total\\_price, \n    STDDEV(price * quantity) AS stddev\\_total\\_price\nFROM \n    cart\nWHERE \n    cart\\_status = 'Active' \n    AND recommended_products IS NOT NULL \n    AND wishlist_flag = true \n    AND product\\_id IN (SELECT product\\_id FROM wishlist)\nGROUP BY \n    product\\_"
  },
  {
    "NL": "Find the average time spent by customers on the website who have made a purchase and have also completed a survey.",
    "Query": "SELECT AVG(time\\_spent) \nFROM customers \nWHERE made\\_purchase = true AND completed\\_survey = tr"
  },
  {
    "NL": "Find the average review rating and the sum of cart value for each event type.",
    "Query": "SELECT event\\_type, AVG(review\\_rating), SUM(cart\\_value)\nFROM events\nGROUP BY event\\_ty"
  },
  {
    "NL": "Give me the total amount of sales made in the last month from the 'orders' table.",
    "Query": "SELECT SUM(amount) FROM orders WHERE order\\_date >= NOW() - INTERVAL '1 mont"
  },
  {
    "NL": "Get the total quantity of products in the inventory for each order and the order status",
    "Query": "SELECT orders.order\\_status, SUM(inventory.quantity) as total\\_quantity\nFROM orders\nJOIN inventory ON orders.order\\_id = inventory.order\\_id\nGROUP BY orders.order\\_id, orders.order\\_stat"
  },
  {
    "NL": "What is the total loyalty points balance and the total discount amount redeemed for customers with a loyalty membership?",
    "Query": "SELECT SUM(loyalty\\_points) AS total\\_loyalty\\_points, SUM(discount\\_amount) AS total\\_discount\\_redeemed\nFROM customers\nWHERE loyalty\\_membership IS NOT NU"
  },
  {
    "NL": "Find all events for orders where the order status is 'cancelled' and the payment status is 'pending' and the total amount is less than 50, along with the event type, the device platform, and the location city, and also find the campaign name for each order.",
    "Query": "SELECT o.order\\_id, e.event\\_type, d.device\\_platform, l.location\\_city, c.campaign\\_name, o.total\\_amount\nFROM orders o\nJOIN events e ON o.order\\_id = e.order\\_id\nJOIN devices d ON o.device\\_id = d.device\\_id\nJOIN locations l ON o.location\\_id = l.location\\_id\nJOIN campaigns c ON o.campaign\\_id = c.campaign\\_id\nWHERE o.order\\_status = 'cancelled' AND o.payment\\_status = 'pending' AND o.total\\_amount <"
  },
  {
    "NL": "Find the product name, standard retail price, and expected lead time for products in the 'Electronics' category with a product status of active, an estimated production cost per unit less than 50, and a net weight greater than 1 kilogram.",
    "Query": "SELECT product\\_name, standard\\_retail\\_price, expected\\_lead\\_time\nFROM products\nWHERE category = 'Electronics' AND product\\_status = 'active' AND estimated\\_production\\_cost < 50 AND net\\_weight > 10"
  },
  {
    "NL": "List the products with a featured product flag set to true, along with their associated supplier reference id, sorted by their standard retail price in descending order.",
    "Query": "SELECT product\\_id, supplier\\_reference\\_id, standard\\_retail\\_price \nFROM products \nWHERE featured\\_product = true \nORDER BY standard\\_retail\\_price DE"
  },
  {
    "NL": "Retrieve the names and descriptions of products that are currently in the cart of users who have participated in the exclusive beta testing of the loyalty program and have a loyalty membership unique identifier greater than 1000.",
    "Query": "SELECT p.name, p.description\nFROM products p\nJOIN cart c ON p.id = c.product\\_id\nJOIN users u ON c.user\\_id = u.id\nWHERE u.is\\_beta\\_tester = true AND u.loyalty\\_membership\\_id > 10"
  },
  {
    "NL": "Show the total number of reviews submitted by customers who have flagged their reviews as inappropriate.",
    "Query": "SELECT COUNT(\\*) FROM reviews WHERE is\\_inappropriate = TR"
  },
  {
    "NL": "List the average star rating of reviews that were submitted by customers who have previously purchased the product more than 3 times.",
    "Query": "SELECT AVG(reviews.star\\_rating)\nFROM reviews\nJOIN orders ON reviews.order\\_id = orders.id\nGROUP BY reviews.product\\_id\nHAVING COUNT(DISTINCT orders.customer\\_id) >"
  },
  {
    "NL": "Find the average cost per acquisition for all campaigns that have a budget greater than 5000.",
    "Query": "SELECT AVG(cost_per_acquisition) \nFROM campaigns \nWHERE budget > 50"
  },
  {
    "NL": "Get the average time spent by customers in seconds on the website who are premium members.",
    "Query": "SELECT AVG(time\\_spent) \nFROM website\\_visits \nWHERE membership\\_status = 'premiu"
  },
  {
    "NL": "Find the average lifetime loyalty points earned by customers who have exceeded their annual loyalty spending threshold and have a loyalty program tier level of 'gold'",
    "Query": "SELECT AVG(loyalty\\_points)\nFROM customers\nWHERE annual\\_spending > (SELECT threshold FROM loyalty\\_thresholds) AND tier\\_level = 'gol"
  },
  {
    "NL": "List the email addresses and names of customers who are subscribed to the newsletter and have a balance greater than $1000 in their accounts.",
    "Query": "SELECT email, name\nFROM customers\nWHERE subscribed_to_newsletter = TRUE AND balance > 10"
  },
  {
    "NL": "Retrieve the order IDs and total amounts of orders placed by customers who have made previous purchases of at least 5 products.",
    "Query": "SELECT order\\_id, SUM(total\\_amount)\nFROM orders\nWHERE customer\\_id IN (\n    SELECT customer\\_id\n    FROM orders\n    GROUP BY customer\\_id\n    HAVING COUNT(DISTINCT product\\_id) >= 5\n)\nGROUP BY order\\_"
  },
  {
    "NL": "Retrieve the official business name of suppliers who have supplied products with an inventory turnover rate greater than 1, along with the expected restock date and the last inventory audit date for those products.",
    "Query": "SELECT s.businessname, p.expected\\_restock\\_date, p.last\\_inventory\\_audit\\_date\nFROM suppliers s\nJOIN products p ON s.supplier\\_id = p.supplier\\_id\nWHERE p.inventory\\_turnover\\_rate >"
  },
  {
    "NL": "List the loyalty points balance of all customers who have products in the wishlist with a price greater than $100.",
    "Query": "SELECT c.loyalty\\_points\\_balance\nFROM customers c\nJOIN wishlists w ON c.customer\\_id = w.customer\\_id\nJOIN products p ON w.product\\_id = p.product\\_id\nWHERE p.price > 1"
  },
  {
    "NL": "Find the total price of each order in the cart, along with the campaign name, start date, and end date of the corresponding campaign, using the estimated delivery date to join the two tables.",
    "Query": "SELECT c.order\\_id, c.total\\_price, ca.campaign\\_name, ca.start\\_date, ca.end\\_date\nFROM cart c\nJOIN campaign ca ON c.estimated\\_delivery\\_date BETWEEN ca.start\\_date AND ca.end\\_da"
  },
  {
    "NL": "Get the campaign names and review unique identifiers for campaigns that have a higher conversion rate than the average conversion rate of all campaigns and have a corresponding review with a higher sentiment analysis score than the average sentiment analysis score of all reviews.",
    "Query": "SELECT campaign\\_name, review\\_unique\\_identifier\nFROM campaigns\nJOIN reviews ON campaigns.campaign\\_id = reviews.campaign\\_id\nWHERE campaigns.conversion\\_rate > (SELECT AVG(conversion\\_rate) FROM campaigns)\nAND reviews.sentiment\\_analysis\\_score > (SELECT AVG(sentiment\\_analysis\\_score) FROM review"
  },
  {
    "NL": "Retrieve the event type, device type, and location city for events where the cart value was greater than 500 and the event occurred in the year 2022",
    "Query": "SELECT event\\_type, device\\_type, location\\_city\nFROM events\nWHERE cart\\_value > 500 AND EXTRACT(YEAR FROM event\\_timestamp) = 20"
  },
  {
    "NL": "Retrieve the event types and the associated customer IDs for events that occurred on the same day as a transaction made by a customer who used a gift card.",
    "Query": "SQL query:\n\n    SELECT DISTINCT e.event\\_type, e.customer\\_id\n    FROM events e\n    JOIN (\n        SELECT customer\\_id, transaction\\_date\n        FROM transactions\n        WHERE payment\\_method = 'gift card'\n    ) t ON e.customer\\_id = t.customer\\_id AND e.event\\_date = t.transaction\\_da"
  },
  {
    "NL": "What are the order details of orders with a total amount greater than 1000 that were shipped from the United States?",
    "Query": "SELECT * FROM orders \nWHERE total_amount > 1000 \nAND shipping_country = 'United State"
  },
  {
    "NL": "Retrieve the list of customers who have added items to their wishlist at least twice, along with the total amount spent by these customers on transactions that included a gift card or store credit usage, along with the average transaction amount and the device platform used for the last event they triggered, filtering for customers who have enabled email notifications and have a loyalty points balance above 1000.",
    "Query": "SELECT c.customer\\_id, \n       c.email, \n       COALESCE(SUM(t.transaction\\_amount), 0) AS total\\_spent,\n       AVG(t.transaction\\_amount) AS avg\\_transaction\\_amount,\n       e.device\\_platform\nFROM customers c\nJOIN transactions t ON c.customer\\_id = t.customer\\_id\nJOIN event\\_logs e ON c.customer\\_id = e.customer\\_id\nJOIN wishlist w ON c.customer\\_id = w.customer\\_id\nWHERE c.loyalty\\_points > 1000\n  AND c.email\\_notifications = TRUE\n  AND e.event\\_type = 'last\\_event'\n  AND (t.payment\\_method = 'gift\\_card' OR t.payment\\_method = 'store\\_credit')\n  AND w.wishlist\\_id IN (\n      SELECT w2.wishlist\\_id\n      FROM wishlist w2\n      GROUP BY w2.wishlist\\_id\n      HAVING COUNT(DISTINCT w2.item\\_id) >= 2\n  )\nGROUP BY c.customer\\_id, c.email, e.device\\_platfo"
  },
  {
    "NL": "What is the total number of transactions made by first-time customers in the year 2022?",
    "Query": "SELECT COUNT(\\*) FROM transactions\nWHERE customer\\_id NOT IN (SELECT customer\\_id FROM transactions WHERE YEAR(transaction\\_date) < 2022)\nAND EXTRACT(YEAR FROM transaction\\_date) = 20"
  },
  {
    "NL": "Find the product id, quantity, and total price for all order items in orders where the product name contains the word 'Laptop', the order status is 'Pending', and the shipping address is located in a city that starts with the letter 'N'. Also, find the total number of products supplied by suppliers who are located in the same city and country of operation as the shipping address. Order the results in descending order of total price.",
    "Query": "```sql\nSELECT oi.product_id, oi.quantity, oi.quantity * p.price AS total_price\nFROM order_items oi\nJOIN orders o ON oi.order_id = o.id\nJOIN products p ON oi.product_id = p.id\nJOIN suppliers s ON p.supplier_id = s.id\nJOIN addresses a1 ON o.shipping_address_id = a1.id\nJOIN addresses a2 ON s.address_id = a2.id\nWHERE p.name ILIKE '%Laptop%' AND o.status = 'Pending' AND a1.city ILIKE 'N%'\nGROUP BY oi.product_id, p.price\nORDER BY total_price DESC;\n\nSELECT COUNT(*)\nFROM suppliers s\nJOIN addresses a1 ON s.address_id = a1.id\nJOIN addresses a2 ON s.city = a2.city AND s.country = a2.country\nWHERE a2.city ILIKE 'N%';"
  },
  {
    "NL": "Find the total number of active subscriptions and the average loyalty points of customers who have an active subscription and a premium account, grouped by city.",
    "Query": "SELECT city, COUNT(*) as total\\_active\\_subscriptions, AVG(loyalty\\_points) as avg\\_loyalty\\_points\nFROM subscriptions\nJOIN customers ON subscriptions.customer\\_id = customers.id\nWHERE subscriptions.status = 'active' AND customers.account\\_type = 'premium'\nGROUP BY ci"
  },
  {
    "NL": "Find the names of all suppliers who have supplied products to campaigns with a budget greater than 1000 and also find the campaign names and their start dates.",
    "Query": "SELECT s.supplier\\_name, c.campaign\\_name, c.start\\_date\nFROM suppliers s\nJOIN product\\_suppliers ps ON s.supplier\\_id = ps.supplier\\_id\nJOIN products p ON ps.product\\_id = p.product\\_id\nJOIN campaigns c ON p.campaign\\_id = c.campaign\\_id\nWHERE c.budget > 10"
  },
  {
    "NL": "Find the average shipping cost for orders that have been shipped from the city of New York.",
    "Query": "SELECT AVG(shipping\\_cost) \nFROM orders \nWHERE shipping\\_city = 'New Yor"
  },
  {
    "NL": "Find all events that occurred on orders which have been shipped to the United States, including the event timestamp and the shipping date.",
    "Query": "SELECT e.event\\_timestamp, o.shipping\\_date\nFROM events e\nJOIN orders o ON e.order\\_id = o.order\\_id\nJOIN customers c ON o.customer\\_id = c.customer\\_id\nWHERE c.country = 'United State"
  },
  {
    "NL": "Which customers initiated a refund for their order and how much was the refund amount?",
    "Query": "SELECT customers.customer\\_id, customers.name, refunds.refund\\_amount\nFROM customers\nJOIN orders ON customers.customer\\_id = orders.customer\\_id\nJOIN refunds ON orders.order\\_id = refunds.order\\_"
  },
  {
    "NL": "What is the total price of all order items with a warranty period of more than 30 days?",
    "Query": "SELECT SUM(price) FROM order\\_items WHERE warranty\\_days >"
  },
  {
    "NL": "Find the total number of reviews and the average rating for products that have been discontinued.",
    "Query": "SELECT COUNT(reviews), AVG(rating)\nFROM reviews\nJOIN products ON reviews.product\\_id = products.id\nWHERE products.discontinued = TR"
  },
  {
    "NL": "Find the total number of products supplied by each supplier and the average supplier rating, along with the inventory details for the products they supply where the quantity is less than the stock threshold.",
    "Query": "```sql\nSELECT s.supplier_id, \n       s.name, \n       COUNT(p.product_id) AS total_products, \n       AVG(r.rating) AS avg_rating, \n       i.quantity, \n       i.stock_threshold\nFROM suppliers s\nJOIN products p ON s.supplier_id = p.supplier_id\nJOIN ratings r ON p.product_id = r.product_id\nJOIN inventory i ON p.product_id = i.product_id\nGROUP BY s.supplier_id, s.name, i.quantity, i.stock_threshold\nHAVING i.quantity < i.stock_threshold;"
  },
  {
    "NL": "Find the total number of orders that have a payment status of paid and were created in the year 2022.",
    "Query": "SELECT COUNT(\\*) FROM orders WHERE payment\\_status = 'paid' AND EXTRACT(YEAR FROM created\\_at) = 20"
  },
  {
    "NL": "What are the product names and quantities of items in orders where the transaction status is 'success'?",
    "Query": "SELECT product\\_name, quantity\nFROM orders\nWHERE transaction\\_status = 'succes"
  },
  {
    "NL": "Retrieve the total amount spent by customers in the past year, grouped by their preferred language.",
    "Query": "SELECT preferred\\_language, SUM(amount) as total\\_spent\nFROM customer\\_transactions\nWHERE transaction\\_date >= NOW() - INTERVAL '1 year'\nGROUP BY preferred\\_langua"
  },
  {
    "NL": "Retrieve the product names from order items along with the order date for those orders that have a promotional offer applied and the payment method used is 'Credit Card'.",
    "Query": "SELECT oi.product\\_name, o.order\\_date\nFROM order\\_items oi\nJOIN orders o ON oi.order\\_id = o.id\nWHERE o.promotional\\_offer = true AND o.payment\\_method = 'Credit Car"
  },
  {
    "NL": "Get the total number of transactions where the chargeback request status is true.",
    "Query": "SELECT COUNT(\\*) FROM transactions WHERE chargeback_request_status = tr"
  },
  {
    "NL": "Find the total revenue generated and campaign name from the campaigns table and the shipping cost from the shipping table where the campaign status is 'active' and the shipping status is 'shipped'.",
    "Query": "SELECT c.campaign\\_name, SUM(c.revenue) AS total\\_revenue, s.shipping\\_cost\nFROM campaigns c\nJOIN shipping s ON c.campaign\\_id = s.campaign\\_id\nWHERE c.campaign\\_status = 'active' AND s.shipping\\_status = 'shipped'\nGROUP BY c.campaign\\_name, s.shipping\\_co"
  },
  {
    "NL": "Find the total number of units ordered and the estimated production cost for each product listed in the order_items table, joining with the products table to include the cost.",
    "Query": "SELECT oi.product\\_id, SUM(oi.units\\_ordered) AS total\\_units\\_ordered, p.cost \\* SUM(oi.units\\_ordered) AS estimated\\_production\\_cost\nFROM order\\_items oi\nJOIN products p ON oi.product\\_id = p.product\\_id\nGROUP BY oi.product\\_id, p.co"
  },
  {
    "NL": "Retrieve the supplier names and their total number of products supplied, ordered by the number of products in descending order.",
    "Query": "SELECT supplier\\_name, COUNT(product\\_id) AS total\\_products\nFROM suppliers\nJOIN products ON suppliers.supplier\\_id = products.supplier\\_id\nGROUP BY supplier\\_name\nORDER BY total\\_products DE"
  },
  {
    "NL": "What is the average accumulated loyalty points balance across all customers who have participated in exclusive beta testing?",
    "Query": "SELECT AVG(loyalty_points_balance)\nFROM customers\nWHERE participated_in_beta_testing = tr"
  },
  {
    "NL": "Get the shipping address, shipping city, shipping state, shipping zipcode, and estimated delivery date for each order that has a total discount amount redeemed greater than 100, and has a free shipping eligibility as true, and the order's shipping record has a shipping status as 'shipped', and the order's shipping record has a tracking number that starts with 'ABC', and the order's shipping record has a shipping cost greater than 20",
    "Query": "SELECT shipping\\_address, shipping\\_city, shipping\\_state, shipping\\_zipcode, estimated\\_delivery\\_date\nFROM orders\nWHERE total\\_discount\\_amount > 100 AND free\\_shipping = true AND shipping\\_status = 'shipped' AND tracking\\_number LIKE 'ABC%' AND shipping\\_cost >"
  },
  {
    "NL": "List all refunds along with their processing dates, refund amounts, and reasons, where the refund amount is greater than $100.",
    "Query": "SELECT refunds.processing\\_date, refunds.amount, refunds.reason\nFROM refunds\nWHERE refunds.amount > 1"
  },
  {
    "NL": "Select the final billed amount for transactions where the transaction status is 'completed'.",
    "Query": "SELECT final\\_billed\\_amount\nFROM transactions\nWHERE transaction\\_status = 'complete"
  },
  {
    "NL": "Find all customers who have more than 1000 lifetime loyalty points earned and have a loyalty program tier level of 'Gold'.",
    "Query": "SELECT * FROM customers \nWHERE loyalty_points > 1000 \nAND loyalty_program_tier = 'Gol"
  },
  {
    "NL": "Calculate the total discount applied and the total tax amount for orders placed in the year 2022, with a refund status of true in the transactions_and_payments table.",
    "Query": "SELECT SUM(discount_amount) as total\\_discount, SUM(tax\\_amount) as total\\_tax\nFROM transactions\\_and\\_payments\nWHERE refund\\_status = true AND order\\_date >= '2022-01-01' AND order\\_date < '2023-01-0"
  },
  {
    "NL": "What are the average shipping costs for transactions from the 'new customer campaign'?",
    "Query": "SELECT AVG(shipping\\_cost)\nFROM transactions\nWHERE campaign = 'new customer campaig"
  },
  {
    "NL": "Find the names of customers who have an active subscription and are located in New York City, along with the total number of products supplied by their preferred supplier.",
    "Query": "SELECT c.name, SUM(p.quantity) as total\\_products\nFROM customers c\nJOIN subscriptions s ON c.id = s.customer\\_id\nJOIN orders o ON s.id = o.subscription\\_id\nJOIN product\\_orders po ON o.id = po.order\\_id\nJOIN products p ON po.product\\_id = p.id\nWHERE c.location = 'New York City' AND s.status = 'active'\nGROUP BY c.na"
  },
  {
    "NL": "List all customers who have made a transaction using cryptocurrency.",
    "Query": "SELECT * FROM customers \nWHERE customer\\_id IN (\n    SELECT customer\\_id FROM transactions \n    WHERE payment\\_method = 'cryptocurrency'"
  },
  {
    "NL": "Find the total number of products supplied by each supplier that has a stock threshold above 100 in the inventory.",
    "Query": "SELECT supplier\\_id, COUNT(*) as total\\_products\nFROM products\nWHERE supplier\\_id IN (\n    SELECT supplier\\_id\n    FROM inventory\n    GROUP BY supplier\\_id\n    HAVING SUM(stock\\_threshold) > 100\n)\nGROUP BY supplier\\_"
  },
  {
    "NL": "What are the exclusive coupon codes assigned to customers in the loyalty program at the platinum level?",
    "Query": "SELECT coupon\\_code\nFROM coupons\nWHERE coupon\\_code IN (\nSELECT coupon\\_code\nFROM customer\\_loyalty\nWHERE loyalty\\_level = 'platinum'\n) AND NOT EXISTS (\nSELECT 1\nFROM customer\\_loyalty\nWHERE loyalty\\_level != 'platinum' AND coupon\\_code = coupons.coupon\\_code"
  },
  {
    "NL": "What is the average total price of carts that have a discounted total price greater than 100 and a cart status of 'Checked Out'?",
    "Query": "SELECT AVG(total\\_price) \nFROM carts \nWHERE discounted\\_total\\_price > 100 AND cart\\_status = 'Checked Ou"
  },
  {
    "NL": "Get the campaign name, target audience, and total price for all campaigns where the campaign type is 'email' and the cart status is 'checkedout'.",
    "Query": "SELECT campaign\\_name, target\\_audience, SUM(total\\_price)\nFROM campaigns\nWHERE campaign\\_type = 'email' AND cart\\_status = 'checkedout'\nGROUP BY campaign\\_name, target\\_audien"
  },
  {
    "NL": "Retrieve the total amount and delivery date of orders that were shipped after '2023-01-01' and have a discount applied greater than 0.",
    "Query": "SELECT SUM(amount), delivery\\_date \nFROM orders \nWHERE shipped\\_date > '2023-01-01' AND discount >"
  },
  {
    "NL": "Retrieve the shipping details of all orders that have a budget greater than $10,000 and list the supplier details of the product shipped.",
    "Query": "SELECT o.order\\_id, o.budget, s.supplier\\_name\nFROM orders o\nJOIN shipments sh ON o.order\\_id = sh.order\\_id\nJOIN suppliers s ON sh.supplier\\_id = s.supplier\\_id\nWHERE o.budget > 100"
  },
  {
    "NL": "What are the details of suppliers from the United States who supplied products for orders with a total amount greater than 500?",
    "Query": "SELECT * FROM suppliers \nJOIN orders ON suppliers.supplier\\_id = orders.supplier\\_id \nWHERE suppliers.country = 'United States' AND orders.total\\_amount > 5"
  },
  {
    "NL": "What are the order IDs, order dates, and shipping addresses of orders for which refunds have been initiated, along with the corresponding refund amounts and return conditions, for customers who have not opened emails and have a review rating of 5 in their events?",
    "Query": "SELECT orders.order\\_id, orders.order\\_date, orders.shipping\\_address, refunds.refund\\_amount, refunds.return\\_condition\nFROM orders\nJOIN refunds ON orders.order\\_id = refunds.order\\_id\nJOIN customers ON orders.customer\\_id = customers.customer\\_id\nJOIN events ON customers.customer\\_id = events.customer\\_id\nWHERE refunds.refund\\_initiated = TRUE\nAND customers.emails\\_opened = FALSE\nAND events.review\\_rating ="
  },
  {
    "NL": "Get the product details of products with available stock quantity greater than 50 and estimated replenishment date within the next 7 days",
    "Query": "SELECT * FROM products\nWHERE stock_quantity > 50 AND estimated\\_replenishment\\_date <= NOW() + INTERVAL '7 day"
  },
  {
    "NL": "How many devices have a device_type of mobile and device_platform of android?",
    "Query": "SELECT COUNT(\\*) FROM devices WHERE device\\_type = 'mobile' AND device\\_platform = 'androi"
  },
  {
    "NL": "Retrieve the total number of products supplied by each supplier along with their average rating.",
    "Query": "SELECT supplier\\_id, COUNT(product\\_id) AS total\\_products, AVG(rating) AS average\\_rating\nFROM products\nGROUP BY supplier\\_"
  },
  {
    "NL": "Find the average total transaction amount for each order that has a review with a star rating of 5.",
    "Query": "SELECT AVG(total\\_transaction\\_amount) \nFROM orders \nJOIN reviews ON orders.order\\_id = reviews.order\\_id \nWHERE reviews.star\\_rating ="
  },
  {
    "NL": "Find the loyalty program tier and total spent for all customers who have ever purchased a product from the 'Electronics' category and have a lifetime loyalty points balance greater than 1000",
    "Query": "SELECT loyalty\\_program\\_tier, SUM(total\\_spent)\nFROM customers\nWHERE EXISTS (\n    SELECT 1\n    FROM purchases\n    WHERE customers.customer\\_id = purchases.customer\\_id\n    AND category = 'Electronics'\n) AND lifetime\\_loyalty\\_points > 1000\nGROUP BY loyalty\\_program\\_ti"
  },
  {
    "NL": "Get the count of customers from the customerinfo table who have more than 100 loyalty points and the average spent per order is greater than 1000.",
    "Query": "SELECT COUNT(\\*) \nFROM customerinfo \nWHERE loyalty_points > 100 \nAND AVG(order_spent) > 10"
  },
  {
    "NL": "What are the review ratings, customer review submission dates and review approval moderation statuses for all reviews with helpful votes received greater than 10?",
    "Query": "SELECT review\\_ratings, review\\_submission\\_dates, review\\_approval\\_moderation\\_statuses\nFROM reviews\nWHERE helpful\\_votes\\_received >"
  },
  {
    "NL": "Find all suppliers based in 'United States' with an average supplier rating above 4.5.",
    "Query": "SELECT * FROM suppliers\nWHERE country = 'United States'\nAND AVG(rating) > 4"
  },
  {
    "NL": "What are the reviews for products with a high aggregate customer review rating and what is the shipping status for orders of these products?",
    "Query": "SQL Query:\n\n```sql\nSELECT p.product_name, r.average_rating, o.shipping_status\nFROM products p\nJOIN (\n    SELECT product_id, AVG(customer_rating) AS average_rating\n    FROM reviews\n    GROUP BY product_id\n) r ON p.product_id = r.product_id\nJOIN orders o ON p.product_id = o.product_id\nWHERE r.average_rating >= (\n    SELECT AVG(average_rating) + STDDEV(average_rating)\n    FROM (\n        SELECT AVG(customer_rating) AS average_rating\n        FROM reviews\n        GROUP BY product_id\n    ) subquery\n);"
  },
  {
    "NL": "Find the average loyalty points earned by customers who have active subscriptions and are premium members.",
    "Query": "SELECT AVG(loyalty_points)\nFROM customers\nWHERE subscription_status = 'active' AND member_status = 'premiu"
  },
  {
    "NL": "Find the total number of products supplied by the supplier with the highest average rating, along with the supplier's official business name.",
    "Query": "SELECT s.businessname, SUM(p.quantity) AS total\\_products\\_supplied\nFROM suppliers s\nJOIN ratings r ON s.supplierid = r.supplierid\nJOIN products p ON s.supplierid = p.supplierid\nGROUP BY s.supplierid, s.businessname\nORDER BY AVG(r.rating) DESC\nLIMIT"
  },
  {
    "NL": "List the total transaction amount and corresponding customer reference for transactions that are flagged as fraudulent.",
    "Query": "SELECT transaction\\_amount, customer\\_reference\nFROM transactions\nWHERE is\\_fraudulent = TR"
  },
  {
    "NL": "Find the total transaction amount for customers who are eligible for special promotions and have made transactions with a total transaction amount greater than 1000.",
    "Query": "SELECT SUM(transaction\\_amount)\nFROM transactions\nWHERE customer\\_eligible\\_for\\_special\\_promotion = TRUE AND transaction\\_amount > 10"
  },
  {
    "NL": "Get the total number of verified reviews and the aggregate customer review rating for the product with the highest rating.",
    "Query": "SELECT COUNT(\\*) AS total\\_verified\\_reviews, ROUND(AVG(rating), 2) AS aggregate\\_customer\\_review\\_rating\nFROM reviews\nWHERE product\\_id = (SELECT product\\_id FROM reviews GROUP BY product\\_id ORDER BY AVG(rating) DESC LIMIT 1) AND verified = TR"
  },
  {
    "NL": "Find the total number of reviews submitted by premium customers.",
    "Query": "SELECT COUNT(\\*) FROM reviews WHERE customer\\_tier = 'premiu"
  },
  {
    "NL": "Find the average sentiment score of reviews for products that have received more than 10 helpful votes and are verified.",
    "Query": "SELECT AVG(reviews.sentiment\\_score)\nFROM reviews\nJOIN products ON reviews.product\\_id = products.id\nWHERE products.verified = true AND reviews.helpful\\_votes >"
  },
  {
    "NL": "What is the campaign name and the budget for the campaign with campaign_id 1?",
    "Query": "SELECT campaign\\_name, budget \nFROM campaigns \nWHERE campaign\\_id ="
  },
  {
    "NL": "Find all orders where shipping status is 'shipped' and order status is 'delivered' along with shipping details.",
    "Query": "SELECT orders.*, shipping\\_details.*\nFROM orders\nJOIN shipping\\_details ON orders.id = shipping\\_details.order\\_id\nWHERE orders.shipping\\_status = 'shipped' AND orders.order\\_status = 'delivere"
  },
  {
    "NL": "List the names of products purchased by customers who are eligible for special promotions and have a loyalty tier level of 'Silver' or higher.",
    "Query": "SELECT DISTINCT p.name \nFROM products p \nJOIN purchases pu ON p.id = pu.product\\_id \nJOIN customers c ON pu.customer\\_id = c.id \nWHERE c.promotion\\_eligibility = true AND c.loyalty\\_tier_level >= 'Silve"
  },
  {
    "NL": "Find the top 5 customers who have made the highest total cart value in events, considering only those with an active subscription and their last order was made within the last 6 months, and also include the product categories they frequently purchase.",
    "Query": "Here's the SQL query for your natural language query:\n\n```sql\nSELECT c.customer_id, c.name, SUM(o.cart_value) as total_cart_value, ARRAY_AGG(pc.category) as frequent_categories\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN subscriptions s ON c.customer_id = s.customer_id\nJOIN order_items oi ON o.order_id = oi.order_id\nJOIN product_categories pc ON oi.product_id = pc.product_id\nWHERE s.status = 'active' AND o.order_date >= NOW() - INTERVAL '6 months'\nGROUP BY c.customer_id, c.name\nORDER BY total_cart_value DESC\nLIMIT 5;\n```\n\nNote that this query assumes the following table structure:\n\n- customers (customer\\_id, name)\n- orders (order\\_id, customer\\_id, order\\_date, cart\\_value)\n- subscriptions (subscription\\_id, customer\\_id, status)\n- order\\_items (order\\_id, product\\_id)\n- product\\_categories (product\\_id, category)\n\nMake sure to adjust the table and column names according to your actual sche"
  },
  {
    "NL": "Find all the campaigns that have a budget greater than 1000 and have impressions greater than 1000.",
    "Query": "SELECT * FROM campaigns WHERE budget > 1000 AND impressions > 10"
  },
  {
    "NL": "Retrieve the average number of edits made to reviews for customers who have an engagement score above 8, have submitted reviews that contain multimedia content, and those reviews were flagged as inappropriate. Also, include the count of such reviews for each customer and filter the results to only include customers who have redeemed more than 100 loyalty points. Further, sort the results by the total number of edits made in descending order.",
    "Query": "SELECT c.customer\\_id, AVG(r.edits) as avg\\_edits, COUNT(r.review\\_id) as num\\_reviews\nFROM customers c\nJOIN reviews r ON c.customer\\_id = r.customer\\_id\nJOIN multimedia m ON r.review\\_id = m.review\\_id\nJOIN flags f ON r.review\\_id = f.review\\_id\nWHERE c.engagement\\_score > 8 AND f.flag = 'inappropriate'\nGROUP BY c.customer\\_id\nHAVING SUM(c.loyalty\\_points) > 100\nORDER BY avg\\_edits DE"
  },
  {
    "NL": "What are the product names and quantities of all order items with a price per unit greater than $50?",
    "Query": "SELECT product\\_name, quantity\nFROM order\\_items\nWHERE price\\_per\\_unit >"
  },
  {
    "NL": "Get the total transaction amount, payment method used, and transaction date and time for transactions that occurred within the last 30 days and corresponding order status is 'delivered', and not cancelled or pending. The transaction method used should be either 'Credit Card' or 'PayPal', and the total transaction amount should be greater than $100.00.",
    "Query": "SELECT SUM(transaction\\_amount) AS total\\_transaction\\_amount, payment\\_method, transaction\\_date\nFROM transactions\nWHERE transaction\\_date >= NOW() - INTERVAL '30 days'\nAND order\\_status = 'delivered'\nAND (payment\\_method = 'Credit Card' OR payment\\_method = 'PayPal')\nAND transaction\\_amount > 100.00\nAND order\\_status NOT IN ('cancelled', 'pending"
  },
  {
    "NL": "Retrieve the total order value for each customer who has made at least one purchase, along with the average review rating for products in their orders, excluding those customers whose reviews have been flagged as inappropriate and considering only verified reviewers. Additionally, filter the results to show only those customers who have spent more than $500 in total and include the city of their last delivery.",
    "Query": "SELECT c.customer\\_id, c.city, SUM(o.total\\_value) as total\\_order\\_value, AVG(r.rating) as avg\\_review\\_rating\nFROM customers c\nJOIN orders o ON c.customer\\_id = o.customer\\_id\nJOIN order\\_items oi ON o.order\\_id = oi.order\\_id\nJOIN products p ON oi.product\\_id = p.product\\_id\nJOIN reviews r ON p.product\\_id = r.product\\_id\nWHERE r.is\\_flagged = false AND r.is\\_verified = true\nGROUP BY c.customer\\_id, c.city\nHAVING SUM(o.total\\_value) > 5"
  },
  {
    "NL": "Find all the customers who have placed orders with a total amount greater than $100 and have an active subscription.",
    "Query": "SELECT * FROM customers \nWHERE total\\_order\\_amount > 100 \nAND subscription\\_status = 'activ"
  },
  {
    "NL": "Get the total amount and discount applied for all orders placed in the last month.",
    "Query": "SELECT SUM(total\\_amount) as total\\_amount, SUM(discount) as discount\nFROM orders\nWHERE order\\_date >= NOW() - INTERVAL '1 mont"
  },
  {
    "NL": "List all campaigns with an end date in the current year that have a budget greater than the actual spent.",
    "Query": "SELECT * FROM campaigns\nWHERE EXTRACT(YEAR FROM end\\_date) = EXTRACT(YEAR FROM CURRENT\\_DATE)\nAND budget > actual\\_spe"
  },
  {
    "NL": "List the wishlist items for customers who have more than 100 loyalty points and are subscribed to the newsletter.",
    "Query": "SELECT * FROM wishlist \nJOIN customers ON wishlist.customer\\_id = customers.id \nWHERE customers.loyalty\\_points > 100 AND customers.newsletter\\_subscribed = TR"
  },
  {
    "NL": "What are the total revenue generated and cost per acquisition for each campaign status where the campaign type is 'online' and there is at least one order item with a matching product id in the order items table?",
    "Query": "```sql\nSELECT campaign_status,\n       SUM(revenue) AS total_revenue,\n       AVG(cost_per_acquisition) AS avg_cost_per_acquisition\nFROM campaigns\nJOIN order_items ON campaigns.id = order_items.campaign_id\nWHERE campaigns.campaign_type = 'online'\nAND EXISTS (\n    SELECT 1\n    FROM order_items oi\n    WHERE oi.product_id = order_items.product_id\n)\nGROUP BY campaign_status;"
  },
  {
    "NL": "Find the total loyalty points earned by customers who have made at least one order and are eligible for special promotions",
    "Query": "SELECT SUM(loyalty_points)\nFROM customers\nWHERE has_ordered = TRUE AND is_eligible_for_promotions = TR"
  },
  {
    "NL": "What is the total number of customers who have active subscriptions and are premium?",
    "Query": "SELECT COUNT(\\*) FROM customers\nWHERE subscription\\_status = 'active' AND membership\\_level = 'premiu"
  },
  {
    "NL": "Retrieve the product display name and standard retail price of all featured products.",
    "Query": "SELECT product\\_display\\_name, standard\\_retail\\_price \nFROM products \nWHERE is\\_featured = TR"
  },
  {
    "NL": "List all order items for a specific order identified by order_id 12345.",
    "Query": "SELECT * FROM order\\_items WHERE order\\_id = 123"
  },
  {
    "NL": "Find the campaign name and total reviews made by customers who purchased products linked to the given campaign ID. Order the results by the total reviews made in descending order.",
    "Query": "SELECT campaign\\_name, SUM(reviews) AS total\\_reviews\nFROM campaigns\nJOIN products ON campaigns.campaign\\_id = products.campaign\\_id\nJOIN orders ON products.product\\_id = orders.product\\_id\nJOIN reviews ON orders.order\\_id = reviews.order\\_id\nGROUP BY campaign\\_name\nORDER BY total\\_reviews DE"
  },
  {
    "NL": "Get the order details of customers who have made a purchase in the last 30 days and have loyalty points greater than 100.",
    "Query": "SELECT * FROM orders \nWHERE order\\_date >= NOW() - INTERVAL '30 days' \nAND customer\\_id IN (SELECT customer\\_id FROM loyalty\\_points WHERE points > 10"
  },
  {
    "NL": "Get the average total price of all the items in the cart and the average discount applied",
    "Query": "SELECT AVG(total_price) AS average\\_total\\_price, AVG(discount) AS average\\_discount\nFROM ca"
  },
  {
    "NL": "What is the total refund amount for all refunds initiated by seller and customer?",
    "Query": "SELECT SUM(refund\\_amount) FROM refunds WHERE initiator IN ('seller', 'customer"
  },
  {
    "NL": "Show the quantity, last_updated, and supplier_id of products in inventory for products with a quantity greater than 50 and a stock_threshold of less than 20.",
    "Query": "SELECT quantity, last\\_updated, supplier\\_id \nFROM products \nWHERE quantity > 50 AND stock\\_threshold <"
  },
  {
    "NL": "Calculate the total loyalty points earned by customers from the last 30 days.",
    "Query": "SELECT SUM(loyalty_points)\nFROM customer_loyalty_points\nWHERE date_earned >= NOW() - INTERVAL '30 day"
  },
  {
    "NL": "Find the total revenue generated and the number of conversions for campaigns that ended after January 1, 2023, and had a ROI greater than 200%",
    "Query": "SELECT SUM(revenue) as total\\_revenue, COUNT(conversions) as num\\_conversions\nFROM campaigns\nWHERE end\\_date > '2023-01-01' AND ROI > 2"
  },
  {
    "NL": "Get the campaign name, campaign status, and the total refund amount for each campaign",
    "Query": "SELECT campaign\\_name, campaign\\_status, SUM(refund\\_amount) as total\\_refund\\_amount\nFROM campaigns\nGROUP BY campaign\\_name, campaign\\_stat"
  },
  {
    "NL": "Find all wishlist items that have a price at addition greater than 100",
    "Query": "SELECT * FROM wishlist\\_items WHERE price\\_at\\_addition > 1"
  },
  {
    "NL": "Get the total amount of all orders that were created after the start date of a specific campaign with id 1.",
    "Query": "SELECT SUM(amount) FROM orders WHERE campaign\\_id = 1 AND order\\_date > (SELECT start\\_date FROM campaigns WHERE id ="
  },
  {
    "NL": "Get the total refund amount, order item id, product name, item status, and standard retail price including tax for each refundable order item that has a total price greater than 100, and has a return period less than 30 days, and belongs to a customer who has a lifetime loyalty points earned greater than 1000, and has an anniversary reward voucher status as true, and order item's product belongs to a supplier with a minimum threshold for restocking greater than 50",
    "Query": "SELECT SUM(refund\\_amount) as total\\_refund\\_amount,\norder\\_item\\_id,\nproduct\\_name,\nitem\\_status,\nstandard\\_retail\\_price \\* (1 + tax\\_rate) as price\\_including\\_tax\nFROM order\\_items\nJOIN orders ON order\\_items.order\\_id = orders.id\nJOIN customers ON orders.customer\\_id = customers.id\nJOIN products ON order\\_items.product\\_id = products.id\nJOIN suppliers ON products.supplier\\_id = suppliers.id\nWHERE total\\_price > 100\nAND return\\_period < 30\nAND customers.lifetime\\_loyalty\\_points\\_earned > 1000\nAND anniversary\\_reward\\_voucher = true\nAND suppliers.minimum\\_threshold\\_for\\_restocking >"
  },
  {
    "NL": "What is the average restocking fee for returns that have been processed?",
    "Query": "SELECT AVG(restocking\\_fee) \nFROM returns \nWHERE processed = tr"
  },
  {
    "NL": "Get the total quantity of products in the inventory that have a stock threshold greater than 50 and a safety stock less than 20.",
    "Query": "SELECT SUM(quantity)\nFROM inventory\nWHERE stock_threshold > 50 AND safety_stock <"
  },
  {
    "NL": "Find the customer information, including their loyalty points and registration date, along with the transaction details, including the transaction date and payment method, and the inventory details, including the quantity and last restock date, for customers who have purchased a product with a quantity greater than 20 and a payment method of credit card, and also check if the customer has a valid subscription and the transaction amount is greater than 50.",
    "Query": "SELECT c.customer\\_id, c.name, c.loyalty\\_points, c.registration\\_date,\nt.transaction\\_date, t.payment\\_method,\ni.product\\_id, i.quantity, i.last\\_restock\\_date,\nt.transaction\\_amount, s.subscription\\_status\nFROM customers c\nJOIN transactions t ON c.customer\\_id = t.customer\\_id\nJOIN inventory i ON t.transaction\\_id = i.transaction\\_id\nJOIN subscriptions s ON c.customer\\_id = s.customer\\_id\nWHERE i.quantity > 20 AND t.payment\\_method = 'credit card'\nAND s.subscription\\_status = 'valid' AND t.transaction\\_amount >"
  },
  {
    "NL": "Find the total amount redeemed by customers who are eligible for special promotions.",
    "Query": "SELECT SUM(amount) FROM redeemptions\nJOIN customers ON redeemptions.customer\\_id = customers.id\nWHERE customers.special\\_promotion\\_eligible = TR"
  },
  {
    "NL": "Retrieve the total number of loyal customers who have made at least one transaction and have a transaction amount greater than 100.",
    "Query": "SELECT COUNT(\\*) FROM customers \nJOIN transactions ON customers.customer\\_id = transactions.customer\\_id \nWHERE customers.loyalty\\_status = 'loyal' AND transactions.transaction\\_amount > 1"
  },
  {
    "NL": "Find out how many products are in stock and what is their current stock status?",
    "Query": "SELECT COUNT(\\*), stock\\_status FROM produc"
  },
  {
    "NL": "Find the total number of unique customers who have both reviewed a product and completed a survey.",
    "Query": "SELECT COUNT(DISTINCT customer\\_id)\nFROM customers\nWHERE customer\\_id IN (\n    SELECT customer\\_id\n    FROM product\\_reviews\n    UNION\n    SELECT customer\\_id\n    FROM surveys\n)\nAND customer\\_id IN (\n    SELECT customer\\_id\n    FROM product\\_reviews\n    INTERSECT\n    SELECT customer\\_id\n    FROM surveys"
  },
  {
    "NL": "What is the average amount spent by customers in the last 365 days, and what is their average lifetime loyalty points earned?",
    "Query": "SELECT AVG(amount) AS \"Avg Amount Spent\", AVG(loyalty\\_points) AS \"Avg Loyalty Points\"\nFROM (\n    SELECT SUM(order\\_amount) AS amount, SUM(loyalty\\_points) AS loyalty\\_points\n    FROM orders\n    WHERE order\\_date >= NOW() - INTERVAL '365 days'\n    GROUP BY customer\\_id\n) subque"
  },
  {
    "NL": "Find the names of products, their corresponding categories and the names of suppliers who supply them, the products being fragile, the suppliers have an average rating of more than 3, the products have a net weight of less than 1 kilogram, and the quantity in stock is more than 50. Also, sort the results by the product names in descending order.",
    "Query": "SELECT p.name, c.name AS category\\_name, s.name AS supplier\\_name, p.is\\_fragile, AVG(s.rating) AS supplier\\_rating, p.net\\_weight, p.quantity\\_in\\_stock\nFROM products p\nJOIN categories c ON p.category\\_id = c.id\nJOIN suppliers s ON p.supplier\\_id = s.id\nWHERE p.is\\_fragile = TRUE AND AVG(s.rating) > 3 AND p.net\\_weight < 1 AND p.quantity\\_in\\_stock > 50\nGROUP BY p.name, c.name, s.name, p.is\\_fragile, p.net\\_weight, p.quantity\\_in\\_stock\nORDER BY p.name DE"
  },
  {
    "NL": "Get the transaction unique identifier, transaction date and time, and payment method used for transactions with a total transaction amount greater than 1000 and a refund status of false.",
    "Query": "SELECT transaction\\_id, transaction\\_date\\_time, payment\\_method\nFROM transactions\nWHERE total\\_transaction\\_amount > 1000 AND refund\\_status = fal"
  }
]